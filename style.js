var IN_GLOBAL_SCOPE = !0;

window.PR_SHOULD_USE_CONTINUATION = !0;

var prettyPrintOne, prettyPrint;

!function() {
    function e(e) {
        function t(e) {
            var t = e.charCodeAt(0);
            if (92 !== t) return t;
            var n = e.charAt(1);
            return t = d[n], t ? t : n >= "0" && "7" >= n ? parseInt(e.substring(1), 8) : "u" === n || "x" === n ? parseInt(e.substring(2), 16) : e.charCodeAt(1);
        }
        function n(e) {
            if (32 > e) return (16 > e ? "\\x0" : "\\x") + e.toString(16);
            var t = String.fromCharCode(e);
            return "\\" === t || "-" === t || "]" === t || "^" === t ? "\\" + t : t;
        }
        function r(e) {
            var r = e.substring(1, e.length - 1).match(new RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]", "g")), a = [], s = "^" === r[0], i = [ "[" ];
            s && i.push("^");
            for (var o = s ? 1 : 0, l = r.length; l > o; ++o) {
                var u = r[o];
                if (/\\[bdsw]/i.test(u)) i.push(u); else {
                    var c, d = t(u);
                    l > o + 2 && "-" === r[o + 1] ? (c = t(r[o + 2]), o += 2) : c = d, a.push([ d, c ]), 
                    65 > c || d > 122 || (65 > c || d > 90 || a.push([ 32 | Math.max(65, d), 32 | Math.min(c, 90) ]), 
                    97 > c || d > 122 || a.push([ -33 & Math.max(97, d), -33 & Math.min(c, 122) ]));
                }
            }
            a.sort(function(e, t) {
                return e[0] - t[0] || t[1] - e[1];
            });
            for (var p = [], f = [], o = 0; o < a.length; ++o) {
                var h = a[o];
                h[0] <= f[1] + 1 ? f[1] = Math.max(f[1], h[1]) : p.push(f = h);
            }
            for (var o = 0; o < p.length; ++o) {
                var h = p[o];
                i.push(n(h[0])), h[1] > h[0] && (h[1] + 1 > h[0] && i.push("-"), i.push(n(h[1])));
            }
            return i.push("]"), i.join("");
        }
        function a(e) {
            for (var t = e.source.match(new RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)", "g")), a = t.length, o = [], l = 0, u = 0; a > l; ++l) {
                var c = t[l];
                if ("(" === c) ++u; else if ("\\" === c.charAt(0)) {
                    var d = +c.substring(1);
                    d && (u >= d ? o[d] = -1 : t[l] = n(d));
                }
            }
            for (var l = 1; l < o.length; ++l) -1 === o[l] && (o[l] = ++s);
            for (var l = 0, u = 0; a > l; ++l) {
                var c = t[l];
                if ("(" === c) ++u, o[u] || (t[l] = "(?:"); else if ("\\" === c.charAt(0)) {
                    var d = +c.substring(1);
                    d && u >= d && (t[l] = "\\" + o[d]);
                }
            }
            for (var l = 0; a > l; ++l) "^" === t[l] && "^" !== t[l + 1] && (t[l] = "");
            if (e.ignoreCase && i) for (var l = 0; a > l; ++l) {
                var c = t[l], p = c.charAt(0);
                c.length >= 2 && "[" === p ? t[l] = r(c) : "\\" !== p && (t[l] = c.replace(/[a-zA-Z]/g, function(e) {
                    var t = e.charCodeAt(0);
                    return "[" + String.fromCharCode(-33 & t, 32 | t) + "]";
                }));
            }
            return t.join("");
        }
        for (var s = 0, i = !1, o = !1, l = 0, u = e.length; u > l; ++l) {
            var c = e[l];
            if (c.ignoreCase) o = !0; else if (/[a-z]/i.test(c.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi, ""))) {
                i = !0, o = !1;
                break;
            }
        }
        for (var d = {
            b: 8,
            t: 9,
            n: 10,
            v: 11,
            f: 12,
            r: 13
        }, p = [], l = 0, u = e.length; u > l; ++l) {
            var c = e[l];
            if (c.global || c.multiline) throw new Error("" + c);
            p.push("(?:" + a(c) + ")");
        }
        return new RegExp(p.join("|"), o ? "gi" : "g");
    }
    function t(e, t) {
        function n(e) {
            var l = e.nodeType;
            if (1 == l) {
                if (r.test(e.className)) return;
                for (var u = e.firstChild; u; u = u.nextSibling) n(u);
                var c = e.nodeName.toLowerCase();
                ("br" === c || "li" === c) && (a[o] = "\n", i[o << 1] = s++, i[o++ << 1 | 1] = e);
            } else if (3 == l || 4 == l) {
                var d = e.nodeValue;
                d.length && (d = t ? d.replace(/\r\n?/g, "\n") : d.replace(/[ \t\r\n]+/g, " "), 
                a[o] = d, i[o << 1] = s, s += d.length, i[o++ << 1 | 1] = e);
            }
        }
        var r = /(?:^|\s)nocode(?:\s|$)/, a = [], s = 0, i = [], o = 0;
        return n(e), {
            sourceCode: a.join("").replace(/\n$/, ""),
            spans: i
        };
    }
    function n(e, t, n, r) {
        if (t) {
            var a = {
                sourceCode: t,
                basePos: e
            };
            n(a), r.push.apply(r, a.decorations);
        }
    }
    function r(e) {
        for (var t = void 0, n = e.firstChild; n; n = n.nextSibling) {
            var r = n.nodeType;
            t = 1 === r ? t ? e : n : 3 === r && F.test(n.nodeValue) ? e : t;
        }
        return t === e ? void 0 : t;
    }
    function a(t, r) {
        var a, s = {};
        !function() {
            for (var n = t.concat(r), i = [], o = {}, l = 0, u = n.length; u > l; ++l) {
                var c = n[l], d = c[3];
                if (d) for (var p = d.length; --p >= 0; ) s[d.charAt(p)] = c;
                var f = c[1], h = "" + f;
                o.hasOwnProperty(h) || (i.push(f), o[h] = null);
            }
            i.push(/[\0-\uffff]/), a = e(i);
        }();
        var i = r.length, o = function(e) {
            for (var t = e.sourceCode, l = e.basePos, c = [ l, I ], d = 0, p = t.match(a) || [], f = {}, h = 0, g = p.length; g > h; ++h) {
                var m, v = p[h], y = f[v], b = void 0;
                if ("string" == typeof y) m = !1; else {
                    var x = s[v.charAt(0)];
                    if (x) b = v.match(x[1]), y = x[0]; else {
                        for (var w = 0; i > w; ++w) if (x = r[w], b = v.match(x[1])) {
                            y = x[0];
                            break;
                        }
                        b || (y = I);
                    }
                    m = y.length >= 5 && "lang-" === y.substring(0, 5), !m || b && "string" == typeof b[1] || (m = !1, 
                    y = z), m || (f[v] = y);
                }
                var C = d;
                if (d += v.length, m) {
                    var S = b[1], N = v.indexOf(S), _ = N + S.length;
                    b[2] && (_ = v.length - b[2].length, N = _ - S.length);
                    var k = y.substring(5);
                    n(l + C, v.substring(0, N), o, c), n(l + C + N, S, u(k, S), c), n(l + C + _, v.substring(_), o, c);
                } else c.push(l + C, y);
            }
            e.decorations = c;
        };
        return o;
    }
    function s(e) {
        var t = [], n = [];
        t.push(e.tripleQuotedStrings ? [ L, /^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/, null, "'\"" ] : e.multiLineStrings ? [ L, /^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/, null, "'\"`" ] : [ L, /^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/, null, "\"'" ]), 
        e.verbatimStrings && n.push([ L, /^@\"(?:[^\"]|\"\")*(?:\"|$)/, null ]);
        var r = e.hashComments;
        r && (e.cStyleComments ? (t.push(r > 1 ? [ A, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, "#" ] : [ A, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\b|[^\r\n]*)/, null, "#" ]), 
        n.push([ L, /^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h(?:h|pp|\+\+)?|[a-z]\w*)>/, null ])) : t.push([ A, /^#[^\r\n]*/, null, "#" ])), 
        e.cStyleComments && (n.push([ A, /^\/\/[^\r\n]*/, null ]), n.push([ A, /^\/\*[\s\S]*?(?:\*\/|$)/, null ]));
        var s = e.regexLiterals;
        if (s) {
            var i = s > 1 ? "" : "\n\r", o = i ? "." : "[\\S\\s]", l = "/(?=[^/*" + i + "])(?:[^/\\x5B\\x5C" + i + "]|\\x5C" + o + "|\\x5B(?:[^\\x5C\\x5D" + i + "]|\\x5C" + o + ")*(?:\\x5D|$))+/";
            n.push([ "lang-regex", RegExp("^" + V + "(" + l + ")") ]);
        }
        var u = e.types;
        u && n.push([ R, u ]);
        var c = ("" + e.keywords).replace(/^ | $/g, "");
        c.length && n.push([ P, new RegExp("^(?:" + c.replace(/[\s,]+/g, "|") + ")\\b"), null ]), 
        t.push([ I, /^\s+/, null, " \r\n	Â " ]);
        var d = "^.[^\\s\\w.$@'\"`/\\\\]*";
        return e.regexLiterals && (d += "(?!s*/)"), n.push([ $, /^@[a-z_$][a-z_$@0-9]*/i, null ], [ R, /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/, null ], [ I, /^[a-z_$][a-z_$@0-9]*/i, null ], [ $, new RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*", "i"), null, "0123456789" ], [ I, /^\\[\s\S]?/, null ], [ O, new RegExp(d), null ]), 
        a(t, n);
    }
    function i(e, t, n) {
        function r(e) {
            var t = e.nodeType;
            if (1 != t || s.test(e.className)) {
                if ((3 == t || 4 == t) && n) {
                    var l = e.nodeValue, u = l.match(i);
                    if (u) {
                        var c = l.substring(0, u.index);
                        e.nodeValue = c;
                        var d = l.substring(u.index + u[0].length);
                        if (d) {
                            var p = e.parentNode;
                            p.insertBefore(o.createTextNode(d), e.nextSibling);
                        }
                        a(e), c || e.parentNode.removeChild(e);
                    }
                }
            } else if ("br" === e.nodeName) a(e), e.parentNode && e.parentNode.removeChild(e); else for (var f = e.firstChild; f; f = f.nextSibling) r(f);
        }
        function a(e) {
            function t(e, n) {
                var r = n ? e.cloneNode(!1) : e, a = e.parentNode;
                if (a) {
                    var s = t(a, 1), i = e.nextSibling;
                    s.appendChild(r);
                    for (var o = i; o; o = i) i = o.nextSibling, s.appendChild(o);
                }
                return r;
            }
            for (;!e.nextSibling; ) if (e = e.parentNode, !e) return;
            for (var n, r = t(e.nextSibling, 0); (n = r.parentNode) && 1 === n.nodeType; ) r = n;
            u.push(r);
        }
        for (var s = /(?:^|\s)nocode(?:\s|$)/, i = /\r\n?|\n/, o = e.ownerDocument, l = o.createElement("li"); e.firstChild; ) l.appendChild(e.firstChild);
        for (var u = [ l ], c = 0; c < u.length; ++c) r(u[c]);
        t === (0 | t) && u[0].setAttribute("value", t);
        var d = o.createElement("ol");
        d.className = "linenums";
        for (var p = Math.max(0, t - 1 | 0) || 0, c = 0, f = u.length; f > c; ++c) l = u[c], 
        l.className = "L" + (c + p) % 10, l.firstChild || l.appendChild(o.createTextNode("Â ")), 
        d.appendChild(l);
        e.appendChild(d);
    }
    function o(e) {
        var t = /\bMSIE\s(\d+)/.exec(navigator.userAgent);
        t = t && +t[1] <= 8;
        var n = /\n/g, r = e.sourceCode, a = r.length, s = 0, i = e.spans, o = i.length, l = 0, u = e.decorations, c = u.length, d = 0;
        u[c] = a;
        var p, f;
        for (f = p = 0; c > f; ) u[f] !== u[f + 2] ? (u[p++] = u[f++], u[p++] = u[f++]) : f += 2;
        for (c = p, f = p = 0; c > f; ) {
            for (var h = u[f], g = u[f + 1], m = f + 2; c >= m + 2 && u[m + 1] === g; ) m += 2;
            u[p++] = h, u[p++] = g, f = m;
        }
        c = u.length = p;
        var v, y = e.sourceNode;
        y && (v = y.style.display, y.style.display = "none");
        try {
            for (;o > l; ) {
                var b, x = (i[l], i[l + 2] || a), w = u[d + 2] || a, m = Math.min(x, w), C = i[l + 1];
                if (1 !== C.nodeType && (b = r.substring(s, m))) {
                    t && (b = b.replace(n, "\r")), C.nodeValue = b;
                    var S = C.ownerDocument, N = S.createElement("span");
                    N.className = u[d + 1];
                    var _ = C.parentNode;
                    _.replaceChild(N, C), N.appendChild(C), x > s && (i[l + 1] = C = S.createTextNode(r.substring(m, x)), 
                    _.insertBefore(C, N.nextSibling));
                }
                s = m, s >= x && (l += 2), s >= w && (d += 2);
            }
        } finally {
            y && (y.style.display = v);
        }
    }
    function l(e, t) {
        for (var n = t.length; --n >= 0; ) {
            var r = t[n];
            q.hasOwnProperty(r) ? f.console && console.warn("cannot override language handler %s", r) : q[r] = e;
        }
    }
    function u(e, t) {
        return e && q.hasOwnProperty(e) || (e = /^\s*</.test(t) ? "default-markup" : "default-code"), 
        q[e];
    }
    function c(e) {
        var n = e.langExtension;
        try {
            var r = t(e.sourceNode, e.pre), a = r.sourceCode;
            e.sourceCode = a, e.spans = r.spans, e.basePos = 0, u(n, a)(e), o(e);
        } catch (s) {
            f.console && console.log(s && s.stack || s);
        }
    }
    function d(e, t, n) {
        var r = document.createElement("div");
        r.innerHTML = "<pre>" + e + "</pre>", r = r.firstChild, n && i(r, n, !0);
        var a = {
            langExtension: t,
            numberLines: n,
            sourceNode: r,
            pre: 1
        };
        return c(a), r.innerHTML;
    }
    function p(e, t) {
        function n(e) {
            return s.getElementsByTagName(e);
        }
        function a() {
            for (var t = f.PR_SHOULD_USE_CONTINUATION ? g.now() + 250 : 1/0; v < u.length && g.now() < t; v++) {
                for (var n = u[v], s = N, l = n; l = l.previousSibling; ) {
                    var d = l.nodeType, p = (7 === d || 8 === d) && l.nodeValue;
                    if (p ? !/^\??prettify\b/.test(p) : 3 !== d || /\S/.test(l.nodeValue)) break;
                    if (p) {
                        s = {}, p.replace(/\b(\w+)=([\w:.%+-]+)/g, function(e, t, n) {
                            s[t] = n;
                        });
                        break;
                    }
                }
                var h = n.className;
                if ((s !== N || b.test(h)) && !x.test(h)) {
                    for (var _ = !1, k = n.parentNode; k; k = k.parentNode) {
                        var E = k.tagName;
                        if (S.test(E) && k.className && b.test(k.className)) {
                            _ = !0;
                            break;
                        }
                    }
                    if (!_) {
                        n.className += " prettyprinted";
                        var T = s.lang;
                        if (!T) {
                            T = h.match(y);
                            var L;
                            !T && (L = r(n)) && C.test(L.tagName) && (T = L.className.match(y)), T && (T = T[1]);
                        }
                        var P;
                        if (w.test(n.tagName)) P = 1; else {
                            var A = n.currentStyle, R = o.defaultView, $ = A ? A.whiteSpace : R && R.getComputedStyle ? R.getComputedStyle(n, null).getPropertyValue("white-space") : 0;
                            P = $ && "pre" === $.substring(0, 3);
                        }
                        var O = s.linenums;
                        (O = "true" === O || +O) || (O = h.match(/\blinenums\b(?::(\d+))?/), O = O ? O[1] && O[1].length ? +O[1] : !0 : !1), 
                        O && i(n, O, P), m = {
                            langExtension: T,
                            sourceNode: n,
                            numberLines: O,
                            pre: P
                        }, c(m);
                    }
                }
            }
            v < u.length ? setTimeout(a, 250) : "function" == typeof e && e();
        }
        for (var s = t || document.body, o = s.ownerDocument || document, l = [ n("pre"), n("code"), n("xmp") ], u = [], d = 0; d < l.length; ++d) for (var p = 0, h = l[d].length; h > p; ++p) u.push(l[d][p]);
        l = null;
        var g = Date;
        g.now || (g = {
            now: function() {
                return +new Date();
            }
        });
        var m, v = 0, y = /\blang(?:uage)?-([\w.]+)(?!\S)/, b = /\bprettyprint\b/, x = /\bprettyprinted\b/, w = /pre|xmp/i, C = /^code$/i, S = /^(?:pre|code|xmp)$/i, N = {};
        a();
    }
    var f = window, h = [ "break,continue,do,else,for,if,return,while" ], g = [ h, "auto,case,char,const,default,double,enum,extern,float,goto,inline,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile" ], m = [ g, "catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof" ], v = [ m, "alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,delegate,dynamic_cast,explicit,export,friend,generic,late_check,mutable,namespace,nullptr,property,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where" ], y = [ m, "abstract,assert,boolean,byte,extends,final,finally,implements,import,instanceof,interface,null,native,package,strictfp,super,synchronized,throws,transient" ], b = [ y, "as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,internal,into,is,let,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var,virtual,where" ], x = "all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes", w = [ m, "debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN" ], C = "caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END", S = [ h, "and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None" ], N = [ h, "alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END" ], _ = [ h, "as,assert,const,copy,drop,enum,extern,fail,false,fn,impl,let,log,loop,match,mod,move,mut,priv,pub,pure,ref,self,static,struct,true,trait,type,unsafe,use" ], k = [ h, "case,done,elif,esac,eval,fi,function,in,local,set,then,until" ], E = [ v, b, w, C, S, N, k ], T = /^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)\b/, L = "str", P = "kwd", A = "com", R = "typ", $ = "lit", O = "pun", I = "pln", j = "tag", D = "dec", z = "src", B = "atn", M = "atv", U = "nocode", V = "(?:^^\\.?|[+-]|[!=]=?=?|\\#|%=?|&&?=?|\\(|\\*=?|[+\\-]=|->|\\/=?|::?|<<?=?|>>?>?=?|,|;|\\?|@|\\[|~|{|\\^\\^?=?|\\|\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*", F = /\S/, G = s({
        keywords: E,
        hashComments: !0,
        cStyleComments: !0,
        multiLineStrings: !0,
        regexLiterals: !0
    }), q = {};
    l(G, [ "default-code" ]), l(a([], [ [ I, /^[^<?]+/ ], [ D, /^<!\w[^>]*(?:>|$)/ ], [ A, /^<\!--[\s\S]*?(?:-\->|$)/ ], [ "lang-", /^<\?([\s\S]+?)(?:\?>|$)/ ], [ "lang-", /^<%([\s\S]+?)(?:%>|$)/ ], [ O, /^(?:<[%?]|[%?]>)/ ], [ "lang-", /^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i ], [ "lang-js", /^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i ], [ "lang-css", /^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i ], [ "lang-in.tag", /^(<\/?[a-z][^<>]*>)/i ] ]), [ "default-markup", "htm", "html", "mxml", "xhtml", "xml", "xsl" ]), 
    l(a([ [ I, /^[\s]+/, null, " 	\r\n" ], [ M, /^(?:\"[^\"]*\"?|\'[^\']*\'?)/, null, "\"'" ] ], [ [ j, /^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i ], [ B, /^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i ], [ "lang-uq.val", /^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/ ], [ O, /^[=<>\/]+/ ], [ "lang-js", /^on\w+\s*=\s*\"([^\"]+)\"/i ], [ "lang-js", /^on\w+\s*=\s*\'([^\']+)\'/i ], [ "lang-js", /^on\w+\s*=\s*([^\"\'>\s]+)/i ], [ "lang-css", /^style\s*=\s*\"([^\"]+)\"/i ], [ "lang-css", /^style\s*=\s*\'([^\']+)\'/i ], [ "lang-css", /^style\s*=\s*([^\"\'>\s]+)/i ] ]), [ "in.tag" ]), 
    l(a([], [ [ M, /^[\s\S]+/ ] ]), [ "uq.val" ]), l(s({
        keywords: v,
        hashComments: !0,
        cStyleComments: !0,
        types: T
    }), [ "c", "cc", "cpp", "cxx", "cyc", "m" ]), l(s({
        keywords: "null,true,false"
    }), [ "json" ]), l(s({
        keywords: b,
        hashComments: !0,
        cStyleComments: !0,
        verbatimStrings: !0,
        types: T
    }), [ "cs" ]), l(s({
        keywords: y,
        cStyleComments: !0
    }), [ "java" ]), l(s({
        keywords: k,
        hashComments: !0,
        multiLineStrings: !0
    }), [ "bash", "bsh", "csh", "sh" ]), l(s({
        keywords: S,
        hashComments: !0,
        multiLineStrings: !0,
        tripleQuotedStrings: !0
    }), [ "cv", "py", "python" ]), l(s({
        keywords: C,
        hashComments: !0,
        multiLineStrings: !0,
        regexLiterals: 2
    }), [ "perl", "pl", "pm" ]), l(s({
        keywords: N,
        hashComments: !0,
        multiLineStrings: !0,
        regexLiterals: !0
    }), [ "rb", "ruby" ]), l(s({
        keywords: w,
        cStyleComments: !0,
        regexLiterals: !0
    }), [ "javascript", "js" ]), l(s({
        keywords: x,
        hashComments: 3,
        cStyleComments: !0,
        multilineStrings: !0,
        tripleQuotedStrings: !0,
        regexLiterals: !0
    }), [ "coffee" ]), l(s({
        keywords: _,
        cStyleComments: !0,
        multilineStrings: !0
    }), [ "rc", "rs", "rust" ]), l(a([], [ [ L, /^[\s\S]+/ ] ]), [ "regex" ]);
    var H = f.PR = {
        createSimpleLexer: a,
        registerLangHandler: l,
        sourceDecorator: s,
        PR_ATTRIB_NAME: B,
        PR_ATTRIB_VALUE: M,
        PR_COMMENT: A,
        PR_DECLARATION: D,
        PR_KEYWORD: P,
        PR_LITERAL: $,
        PR_NOCODE: U,
        PR_PLAIN: I,
        PR_PUNCTUATION: O,
        PR_SOURCE: z,
        PR_STRING: L,
        PR_TAG: j,
        PR_TYPE: R,
        prettyPrintOne: IN_GLOBAL_SCOPE ? f.prettyPrintOne = d : prettyPrintOne = d,
        prettyPrint: prettyPrint = IN_GLOBAL_SCOPE ? f.prettyPrint = p : prettyPrint = p
    };
    "function" == typeof define && define.amd && define("google-code-prettify", [], function() {
        return H;
    });
}(), function() {
    var e = navigator.userAgent.toLowerCase().indexOf("webkit") > -1, t = navigator.userAgent.toLowerCase().indexOf("opera") > -1, n = navigator.userAgent.toLowerCase().indexOf("msie") > -1;
    if ((e || t || n) && "undefined" != typeof document.getElementById) {
        var r = window.addEventListener ? "addEventListener" : "attachEvent";
        window[r]("hashchange", function() {
            var e = document.getElementById(location.hash.substring(1));
            e && (/^(?:a|select|input|button|textarea)$/i.test(e.tagName) || (e.tabIndex = -1), 
            e.focus());
        }, !1);
    }
}(), function(e) {
    function t() {
        function t(e) {
            var t = parseInt(e);
            return isNaN(t) ? 0 : t;
        }
        var n = e("#shareThis"), r = n.data("url"), s = encodeURIComponent(r);
        a && (e.ajax({
            url: "http://urls.api.twitter.com/1/urls/count.json?url=" + s,
            dataType: "jsonp"
        }).done(function(r) {
            if (r) {
                var a = e("<a/>").addClass("share-count share-count-link").text(t(r.count));
                a.attr({
                    href: "http://twitter.com/search?q=" + s,
                    target: "_blank"
                }), n.find(".share-twitter .share-title").append(a);
            }
        }), e.ajax({
            url: "http://api.b.st-hatena.com/entry.count?url=" + s,
            dataType: "jsonp"
        }).done(function(r) {
            var a = e("<span/>").addClass("share-count").text(t(r));
            n.find(".share-hatena .share-title").append(a);
        }), e.ajax({
            url: "https://graph.facebook.com/?id=" + s,
            dataType: "jsonp"
        }).done(function(r) {
            if (r) {
                var a = e("<span/>").addClass("share-count").text(t(r.shares));
                n.find(".share-facebook .share-title").append(a);
            }
        }), makotokw && makotokw.counter_api && makotokw.counter_api.length > 0 && e.ajax({
            url: makotokw.counter_api + "?url=" + s,
            dataType: "jsonp"
        }).done(function(r) {
            if (r) {
                var a = e("<span/>").addClass("share-count").text(t(r.pocket));
                n.find(".share-pocket .share-title").append(a);
                var s = e("<span/>").addClass("share-count").text(t(r.google));
                n.find(".share-googleplus .share-title").append(s);
            }
        }));
    }
    function n() {
        var n = e("#shareThis");
        n.length > 0 && a && e(window).bind("scroll.shareThis load.shareThis", function() {
            e(this).scrollTop() + e(this).height() > n.offset().top && (t(), e(this).unbind("scroll.shareThis load.shareThis"));
        });
    }
    function r() {
        var t = e(window).height(), n = e(document.body).height() - u.height(), r = t - n;
        a && (r -= 32), 0 >= r && (r = 1), u.height(r);
    }
    var a = !1, s = navigator.userAgent, i = s.match(/msie/i), o = i && s.match(/msie 7\./i), l = i && s.match(/msie 8\./i);
    i && e("html").addClass(o ? "ie ie7" : l ? "ie ie8" : "ie");
    var u = (e("#main"), e("#footerMargin"));
    e(window).on("sticky", r).scroll(r).resize(r), e(document).ready(function() {
        e.isFunction(prettyPrint) && prettyPrint(), a = e("#wpadminbar").length > 0, n(), 
        r();
    });
}(jQuery);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByZXR0aWZ5LmpzIiwic2tpcC1saW5rLWZvY3VzLWZpeC5qcyIsInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJJTl9HTE9CQUxfU0NPUEUiLCJ3aW5kb3ciLCJwcmV0dHlQcmludE9uZSIsInByZXR0eVByaW50IiwiY29tYmluZVByZWZpeFBhdHRlcm5zIiwicmVnZXhzIiwiZGVjb2RlRXNjYXBlIiwiY2hhcnNldFBhcnQiLCJjYzAiLCJjaGFyQ29kZUF0IiwiYzEiLCJjaGFyQXQiLCJlc2NhcGVDaGFyVG9Db2RlVW5pdCIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiZW5jb2RlRXNjYXBlIiwiY2hhckNvZGUiLCJ0b1N0cmluZyIsImNoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2FzZUZvbGRDaGFyc2V0IiwiY2hhclNldCIsImNoYXJzZXRQYXJ0cyIsImxlbmd0aCIsIm1hdGNoIiwiUmVnRXhwIiwicmFuZ2VzIiwiaW52ZXJzZSIsIm91dCIsInB1c2giLCJpIiwibiIsInAiLCJ0ZXN0IiwiZW5kIiwic3RhcnQiLCJNYXRoIiwibWF4IiwibWluIiwic29ydCIsImEiLCJiIiwiY29uc29saWRhdGVkUmFuZ2VzIiwibGFzdFJhbmdlIiwicmFuZ2UiLCJqb2luIiwiYWxsb3dBbnl3aGVyZUZvbGRDYXNlQW5kUmVudW1iZXJHcm91cHMiLCJyZWdleCIsInBhcnRzIiwic291cmNlIiwiY2FwdHVyZWRHcm91cHMiLCJncm91cEluZGV4IiwiZGVjaW1hbFZhbHVlIiwiY2FwdHVyZWRHcm91cEluZGV4IiwiaWdub3JlQ2FzZSIsIm5lZWRUb0ZvbGRDYXNlIiwiY2gwIiwicmVwbGFjZSIsImNjIiwidCIsInYiLCJmIiwiciIsInJld3JpdHRlbiIsImdsb2JhbCIsIm11bHRpbGluZSIsIkVycm9yIiwiZXh0cmFjdFNvdXJjZVNwYW5zIiwibm9kZSIsImlzUHJlZm9ybWF0dGVkIiwid2FsayIsInR5cGUiLCJub2RlVHlwZSIsIm5vY29kZSIsImNsYXNzTmFtZSIsImNoaWxkIiwiZmlyc3RDaGlsZCIsIm5leHRTaWJsaW5nIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImNodW5rcyIsImsiLCJzcGFucyIsInRleHQiLCJub2RlVmFsdWUiLCJzb3VyY2VDb2RlIiwiYXBwZW5kRGVjb3JhdGlvbnMiLCJiYXNlUG9zIiwibGFuZ0hhbmRsZXIiLCJqb2IiLCJhcHBseSIsImRlY29yYXRpb25zIiwiY2hpbGRDb250ZW50V3JhcHBlciIsImVsZW1lbnQiLCJ3cmFwcGVyIiwidW5kZWZpbmVkIiwiYyIsIm5vdFdzIiwiY3JlYXRlU2ltcGxlTGV4ZXIiLCJzaG9ydGN1dFN0eWxlUGF0dGVybnMiLCJmYWxsdGhyb3VnaFN0eWxlUGF0dGVybnMiLCJ0b2tlbml6ZXIiLCJzaG9ydGN1dHMiLCJhbGxQYXR0ZXJucyIsImNvbmNhdCIsImFsbFJlZ2V4cyIsInJlZ2V4S2V5cyIsInBhdHRlcm5QYXJ0cyIsInNob3J0Y3V0Q2hhcnMiLCJoYXNPd25Qcm9wZXJ0eSIsIm5QYXR0ZXJucyIsImRlY29yYXRlIiwiUFJfUExBSU4iLCJwb3MiLCJ0b2tlbnMiLCJzdHlsZUNhY2hlIiwidGkiLCJuVG9rZW5zIiwiaXNFbWJlZGRlZCIsInRva2VuIiwic3R5bGUiLCJQUl9TT1VSQ0UiLCJ0b2tlblN0YXJ0IiwiZW1iZWRkZWRTb3VyY2UiLCJlbWJlZGRlZFNvdXJjZVN0YXJ0IiwiaW5kZXhPZiIsImVtYmVkZGVkU291cmNlRW5kIiwibGFuZyIsImxhbmdIYW5kbGVyRm9yRXh0ZW5zaW9uIiwic291cmNlRGVjb3JhdG9yIiwib3B0aW9ucyIsIlBSX1NUUklORyIsImhjIiwiUFJfQ09NTUVOVCIsInJlZ2V4TGl0ZXJhbHMiLCJyZWdleEV4Y2xzIiwicmVnZXhBbnkiLCJSRUdFWF9MSVRFUkFMIiwiUkVHRVhQX1BSRUNFREVSX1BBVFRFUk4iLCJ0eXBlcyIsIlBSX1RZUEUiLCJrZXl3b3JkcyIsIlBSX0tFWVdPUkQiLCJwdW5jdHVhdGlvbiIsIlBSX0xJVEVSQUwiLCJQUl9QVU5DVFVBVElPTiIsIm51bWJlckxpbmVzIiwib3B0X3N0YXJ0TGluZU51bSIsImxpbmVCcmVhayIsImZpcnN0TGluZSIsImluZGV4IiwidGFpbCIsInBhcmVudCIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiYnJlYWtBZnRlciIsInJlbW92ZUNoaWxkIiwibGluZUVuZE5vZGUiLCJicmVha0xlZnRPZiIsImxpbWl0IiwiY29weSIsInJpZ2h0U2lkZSIsImNsb25lTm9kZSIsInBhcmVudENsb25lIiwibmV4dCIsImFwcGVuZENoaWxkIiwic2libGluZyIsImNvcGllZExpc3RJdGVtIiwibGlzdEl0ZW1zIiwib3duZXJEb2N1bWVudCIsImxpIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsIm9sIiwib2Zmc2V0IiwicmVjb21iaW5lVGFnc0FuZERlY29yYXRpb25zIiwiaXNJRThPckVhcmxpZXIiLCJleGVjIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibmV3bGluZVJlIiwic291cmNlTGVuZ3RoIiwic291cmNlSW5kZXgiLCJuU3BhbnMiLCJzcGFuSW5kZXgiLCJuRGVjb3JhdGlvbnMiLCJkZWNvcmF0aW9uSW5kZXgiLCJkZWNQb3MiLCJzdGFydFBvcyIsInN0YXJ0RGVjIiwib2xkRGlzcGxheSIsInNvdXJjZU5vZGUiLCJkaXNwbGF5Iiwic3R5bGVkVGV4dCIsInNwYW5FbmQiLCJkZWNFbmQiLCJ0ZXh0Tm9kZSIsInNwYW4iLCJyZXBsYWNlQ2hpbGQiLCJyZWdpc3RlckxhbmdIYW5kbGVyIiwiaGFuZGxlciIsImZpbGVFeHRlbnNpb25zIiwiZXh0IiwibGFuZ0hhbmRsZXJSZWdpc3RyeSIsIndpbiIsImNvbnNvbGUiLCJleHRlbnNpb24iLCJhcHBseURlY29yYXRvciIsIm9wdF9sYW5nRXh0ZW5zaW9uIiwibGFuZ0V4dGVuc2lvbiIsInNvdXJjZUFuZFNwYW5zIiwicHJlIiwiZSIsIiRwcmV0dHlQcmludE9uZSIsInNvdXJjZUNvZGVIdG1sIiwib3B0X251bWJlckxpbmVzIiwiY29udGFpbmVyIiwiaW5uZXJIVE1MIiwiJHByZXR0eVByaW50Iiwib3B0X3doZW5Eb25lIiwib3B0X3Jvb3QiLCJieVRhZ05hbWUiLCJ0biIsInJvb3QiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImRvV29yayIsImVuZFRpbWUiLCJjbG9jayIsIkluZmluaXR5IiwiZWxlbWVudHMiLCJjcyIsImF0dHJzIiwiRU1QVFkiLCJwcmVjZWRlciIsInByZXZpb3VzU2libGluZyIsIm50IiwidmFsdWUiLCJfIiwibmFtZSIsInByZXR0eVByaW50UmUiLCJwcmV0dHlQcmludGVkUmUiLCJuZXN0ZWQiLCJ0YWdOYW1lIiwicHJlQ29kZVhtcFJlIiwibGFuZ0V4dGVuc2lvblJlIiwiY29kZVJlIiwicHJlZm9ybWF0dGVkIiwicHJlZm9ybWF0dGVkVGFnTmFtZVJlIiwiY3VycmVudFN0eWxlIiwiZGVmYXVsdFZpZXciLCJkb2MiLCJ3aGl0ZXNwYWNlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJsaW5lTnVtcyIsInByZXR0eVByaW50aW5nSm9iIiwic2V0VGltZW91dCIsImJvZHkiLCJjb2RlU2VnbWVudHMiLCJqIiwiRGF0ZSIsIm5vdyIsIkZMT1dfQ09OVFJPTF9LRVlXT1JEUyIsIkNfS0VZV09SRFMiLCJDT01NT05fS0VZV09SRFMiLCJDUFBfS0VZV09SRFMiLCJKQVZBX0tFWVdPUkRTIiwiQ1NIQVJQX0tFWVdPUkRTIiwiQ09GRkVFX0tFWVdPUkRTIiwiSlNDUklQVF9LRVlXT1JEUyIsIlBFUkxfS0VZV09SRFMiLCJQWVRIT05fS0VZV09SRFMiLCJSVUJZX0tFWVdPUkRTIiwiUlVTVF9LRVlXT1JEUyIsIlNIX0tFWVdPUkRTIiwiQUxMX0tFWVdPUkRTIiwiQ19UWVBFUyIsIlBSX1RBRyIsIlBSX0RFQ0xBUkFUSU9OIiwiUFJfQVRUUklCX05BTUUiLCJQUl9BVFRSSUJfVkFMVUUiLCJQUl9OT0NPREUiLCJkZWNvcmF0ZVNvdXJjZSIsImhhc2hDb21tZW50cyIsImNTdHlsZUNvbW1lbnRzIiwibXVsdGlMaW5lU3RyaW5ncyIsInZlcmJhdGltU3RyaW5ncyIsInRyaXBsZVF1b3RlZFN0cmluZ3MiLCJtdWx0aWxpbmVTdHJpbmdzIiwiUFIiLCJkZWZpbmUiLCJpc193ZWJraXQiLCJpc19vcGVyYSIsImlzX2llIiwiZXZlbnRNZXRob2QiLCJnZXRFbGVtZW50QnlJZCIsImxvY2F0aW9uIiwiaGFzaCIsInRhYkluZGV4IiwiZm9jdXMiLCIkIiwidXBkYXRlU2hhcmVDb3VudCIsInRvSW50IiwibnVtIiwiaXNOYU4iLCIkc2hhcmVUaGlzIiwicGVybWFsaW5rIiwiZGF0YSIsImVuY29kZWRQZXJtYWxpbmsiLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc0FkbWluIiwiYWpheCIsInVybCIsImRhdGFUeXBlIiwiZG9uZSIsIiRjb3VudCIsImFkZENsYXNzIiwiY291bnQiLCJhdHRyIiwiaHJlZiIsInRhcmdldCIsImZpbmQiLCJhcHBlbmQiLCJzaGFyZXMiLCJtYWtvdG9rdyIsImNvdW50ZXJfYXBpIiwiJGNvdW50UG9ja2V0IiwicG9ja2V0IiwiJGNvdW50R29vZ2xlUGx1cyIsImdvb2dsZSIsImxhenlMb2FkU2hhcmVDb3VudCIsImJpbmQiLCJ0aGlzIiwic2Nyb2xsVG9wIiwiaGVpZ2h0IiwidG9wIiwidW5iaW5kIiwic3RpY2t5Rm9vdGVyIiwid2luZG93SGVpZ2h0IiwiZG9jSGVpZ2h0IiwiJGZvb3Rlck1hcmdpbiIsImRpZmYiLCJ1YSIsImlzSUUiLCJpc0lFNyIsImlzSUU4Iiwib24iLCJzY3JvbGwiLCJyZXNpemUiLCJyZWFkeSIsImlzRnVuY3Rpb24iLCJqUXVlcnkiXSwibWFwcGluZ3MiOiJBQTBEQSxJQUFBQSxtQkFBQTs7QUFPQUMsT0FBQSw4QkFBQTs7QUFXQSxJQUFBQyxnQkFVQUM7O0NBR0E7SUFnS0EsU0FBQUMsRUFBQUM7UUEwQkEsU0FBQUMsRUFBQUM7WUFDQSxJQUFBQyxJQUFBRCxFQUFBRSxXQUFBO1lBQ0EsSUFBQSxPQUFBRCxHQUNBLE9BQUFB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aWxlIjoic3R5bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKEMpIDIwMDYgR29vZ2xlIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5cbi8qKlxuICogQGZpbGVvdmVydmlld1xuICogc29tZSBmdW5jdGlvbnMgZm9yIGJyb3dzZXItc2lkZSBwcmV0dHkgcHJpbnRpbmcgb2YgY29kZSBjb250YWluZWQgaW4gaHRtbC5cbiAqXG4gKiA8cD5cbiAqIEZvciBhIGZhaXJseSBjb21wcmVoZW5zaXZlIHNldCBvZiBsYW5ndWFnZXMgc2VlIHRoZVxuICogPGEgaHJlZj1cImh0dHA6Ly9nb29nbGUtY29kZS1wcmV0dGlmeS5nb29nbGVjb2RlLmNvbS9zdm4vdHJ1bmsvUkVBRE1FLmh0bWwjbGFuZ3NcIj5SRUFETUU8L2E+XG4gKiBmaWxlIHRoYXQgY2FtZSB3aXRoIHRoaXMgc291cmNlLiAgQXQgYSBtaW5pbXVtLCB0aGUgbGV4ZXIgc2hvdWxkIHdvcmsgb24gYVxuICogbnVtYmVyIG9mIGxhbmd1YWdlcyBpbmNsdWRpbmcgQyBhbmQgZnJpZW5kcywgSmF2YSwgUHl0aG9uLCBCYXNoLCBTUUwsIEhUTUwsXG4gKiBYTUwsIENTUywgSmF2YXNjcmlwdCwgYW5kIE1ha2VmaWxlcy4gIEl0IHdvcmtzIHBhc3NhYmx5IG9uIFJ1YnksIFBIUCBhbmQgQXdrXG4gKiBhbmQgYSBzdWJzZXQgb2YgUGVybCwgYnV0LCBiZWNhdXNlIG9mIGNvbW1lbnRpbmcgY29udmVudGlvbnMsIGRvZXNuJ3Qgd29yayBvblxuICogU21hbGx0YWxrLCBMaXNwLWxpa2UsIG9yIENBTUwtbGlrZSBsYW5ndWFnZXMgd2l0aG91dCBhbiBleHBsaWNpdCBsYW5nIGNsYXNzLlxuICogPHA+XG4gKiBVc2FnZTogPG9sPlxuICogPGxpPiBpbmNsdWRlIHRoaXMgc291cmNlIGZpbGUgaW4gYW4gaHRtbCBwYWdlIHZpYVxuICogICB7QGNvZGUgPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCIgc3JjPVwiL3BhdGgvdG8vcHJldHRpZnkuanNcIj48L3NjcmlwdD59XG4gKiA8bGk+IGRlZmluZSBzdHlsZSBydWxlcy4gIFNlZSB0aGUgZXhhbXBsZSBwYWdlIGZvciBleGFtcGxlcy5cbiAqIDxsaT4gbWFyayB0aGUge0Bjb2RlIDxwcmU+fSBhbmQge0Bjb2RlIDxjb2RlPn0gdGFncyBpbiB5b3VyIHNvdXJjZSB3aXRoXG4gKiAgICB7QGNvZGUgY2xhc3M9cHJldHR5cHJpbnQufVxuICogICAgWW91IGNhbiBhbHNvIHVzZSB0aGUgKGh0bWwgZGVwcmVjYXRlZCkge0Bjb2RlIDx4bXA+fSB0YWcsIGJ1dCB0aGUgcHJldHR5XG4gKiAgICBwcmludGVyIG5lZWRzIHRvIGRvIG1vcmUgc3Vic3RhbnRpYWwgRE9NIG1hbmlwdWxhdGlvbnMgdG8gc3VwcG9ydCB0aGF0LCBzb1xuICogICAgc29tZSBjc3Mgc3R5bGVzIG1heSBub3QgYmUgcHJlc2VydmVkLlxuICogPC9vbD5cbiAqIFRoYXQncyBpdC4gIEkgd2FudGVkIHRvIGtlZXAgdGhlIEFQSSBhcyBzaW1wbGUgYXMgcG9zc2libGUsIHNvIHRoZXJlJ3Mgbm9cbiAqIG5lZWQgdG8gc3BlY2lmeSB3aGljaCBsYW5ndWFnZSB0aGUgY29kZSBpcyBpbiwgYnV0IGlmIHlvdSB3aXNoLCB5b3UgY2FuIGFkZFxuICogYW5vdGhlciBjbGFzcyB0byB0aGUge0Bjb2RlIDxwcmU+fSBvciB7QGNvZGUgPGNvZGU+fSBlbGVtZW50IHRvIHNwZWNpZnkgdGhlXG4gKiBsYW5ndWFnZSwgYXMgaW4ge0Bjb2RlIDxwcmUgY2xhc3M9XCJwcmV0dHlwcmludCBsYW5nLWphdmFcIj59LiAgQW55IGNsYXNzIHRoYXRcbiAqIHN0YXJ0cyB3aXRoIFwibGFuZy1cIiBmb2xsb3dlZCBieSBhIGZpbGUgZXh0ZW5zaW9uLCBzcGVjaWZpZXMgdGhlIGZpbGUgdHlwZS5cbiAqIFNlZSB0aGUgXCJsYW5nLSouanNcIiBmaWxlcyBpbiB0aGlzIGRpcmVjdG9yeSBmb3IgY29kZSB0aGF0IGltcGxlbWVudHNcbiAqIHBlci1sYW5ndWFnZSBmaWxlIGhhbmRsZXJzLlxuICogPHA+XG4gKiBDaGFuZ2UgbG9nOjxicj5cbiAqIGNiZXVzdCwgMjAwNi8wOC8yMlxuICogPGJsb2NrcXVvdGU+XG4gKiAgIEphdmEgYW5ub3RhdGlvbnMgKHN0YXJ0IHdpdGggXCJAXCIpIGFyZSBub3cgY2FwdHVyZWQgYXMgbGl0ZXJhbHMgKFwibGl0XCIpXG4gKiA8L2Jsb2NrcXVvdGU+XG4gKiBAcmVxdWlyZXMgY29uc29sZVxuICovXG5cbi8vIEpTTGludCBkZWNsYXJhdGlvbnNcbi8qZ2xvYmFsIGNvbnNvbGUsIGRvY3VtZW50LCBuYXZpZ2F0b3IsIHNldFRpbWVvdXQsIHdpbmRvdywgZGVmaW5lICovXG5cbi8qKiBAZGVmaW5lIHtib29sZWFufSAqL1xudmFyIElOX0dMT0JBTF9TQ09QRSA9IHRydWU7XG5cbi8qKlxuICogU3BsaXQge0Bjb2RlIHByZXR0eVByaW50fSBpbnRvIG11bHRpcGxlIHRpbWVvdXRzIHNvIGFzIG5vdCB0byBpbnRlcmZlcmUgd2l0aFxuICogVUkgZXZlbnRzLlxuICogSWYgc2V0IHRvIHtAY29kZSBmYWxzZX0sIHtAY29kZSBwcmV0dHlQcmludCgpfSBpcyBzeW5jaHJvbm91cy5cbiAqL1xud2luZG93WydQUl9TSE9VTERfVVNFX0NPTlRJTlVBVElPTiddID0gdHJ1ZTtcblxuLyoqXG4gKiBQcmV0dHkgcHJpbnQgYSBjaHVuayBvZiBjb2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZUNvZGVIdG1sIFRoZSBIVE1MIHRvIHByZXR0eSBwcmludC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBvcHRfbGFuZ0V4dGVuc2lvbiBUaGUgbGFuZ3VhZ2UgbmFtZSB0byB1c2UuXG4gKiAgICAgVHlwaWNhbGx5LCBhIGZpbGVuYW1lIGV4dGVuc2lvbiBsaWtlICdjcHAnIG9yICdqYXZhJy5cbiAqIEBwYXJhbSB7bnVtYmVyfGJvb2xlYW59IG9wdF9udW1iZXJMaW5lcyBUcnVlIHRvIG51bWJlciBsaW5lcyxcbiAqICAgICBvciB0aGUgMS1pbmRleGVkIG51bWJlciBvZiB0aGUgZmlyc3QgbGluZSBpbiBzb3VyY2VDb2RlSHRtbC5cbiAqIEByZXR1cm4ge3N0cmluZ30gY29kZSBhcyBodG1sLCBidXQgcHJldHRpZXJcbiAqL1xudmFyIHByZXR0eVByaW50T25lO1xuLyoqXG4gKiBGaW5kIGFsbCB0aGUge0Bjb2RlIDxwcmU+fSBhbmQge0Bjb2RlIDxjb2RlPn0gdGFncyBpbiB0aGUgRE9NIHdpdGhcbiAqIHtAY29kZSBjbGFzcz1wcmV0dHlwcmludH0gYW5kIHByZXR0aWZ5IHRoZW0uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0X3doZW5Eb25lIGNhbGxlZCB3aGVuIHByZXR0aWZ5aW5nIGlzIGRvbmUuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fEhUTUxEb2N1bWVudH0gb3B0X3Jvb3QgYW4gZWxlbWVudCBvciBkb2N1bWVudFxuICogICBjb250YWluaW5nIGFsbCB0aGUgZWxlbWVudHMgdG8gcHJldHR5IHByaW50LlxuICogICBEZWZhdWx0cyB0byB7QGNvZGUgZG9jdW1lbnQuYm9keX0uXG4gKi9cbnZhciBwcmV0dHlQcmludDtcblxuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgd2luID0gd2luZG93O1xuICAvLyBLZXl3b3JkIGxpc3RzIGZvciB2YXJpb3VzIGxhbmd1YWdlcy5cbiAgLy8gV2UgdXNlIHRoaW5ncyB0aGF0IGNvZXJjZSB0byBzdHJpbmdzIHRvIG1ha2UgdGhlbSBjb21wYWN0IHdoZW4gbWluaWZpZWRcbiAgLy8gYW5kIHRvIGRlZmVhdCBhZ2dyZXNzaXZlIG9wdGltaXplcnMgdGhhdCBmb2xkIGxhcmdlIHN0cmluZyBjb25zdGFudHMuXG4gIHZhciBGTE9XX0NPTlRST0xfS0VZV09SRFMgPSBbXCJicmVhayxjb250aW51ZSxkbyxlbHNlLGZvcixpZixyZXR1cm4sd2hpbGVcIl07XG4gIHZhciBDX0tFWVdPUkRTID0gW0ZMT1dfQ09OVFJPTF9LRVlXT1JEUyxcImF1dG8sY2FzZSxjaGFyLGNvbnN0LGRlZmF1bHQsXCIgKyBcbiAgICAgIFwiZG91YmxlLGVudW0sZXh0ZXJuLGZsb2F0LGdvdG8saW5saW5lLGludCxsb25nLHJlZ2lzdGVyLHNob3J0LHNpZ25lZCxcIiArXG4gICAgICBcInNpemVvZixzdGF0aWMsc3RydWN0LHN3aXRjaCx0eXBlZGVmLHVuaW9uLHVuc2lnbmVkLHZvaWQsdm9sYXRpbGVcIl07XG4gIHZhciBDT01NT05fS0VZV09SRFMgPSBbQ19LRVlXT1JEUyxcImNhdGNoLGNsYXNzLGRlbGV0ZSxmYWxzZSxpbXBvcnQsXCIgK1xuICAgICAgXCJuZXcsb3BlcmF0b3IscHJpdmF0ZSxwcm90ZWN0ZWQscHVibGljLHRoaXMsdGhyb3csdHJ1ZSx0cnksdHlwZW9mXCJdO1xuICB2YXIgQ1BQX0tFWVdPUkRTID0gW0NPTU1PTl9LRVlXT1JEUyxcImFsaWdub2YsYWxpZ25fdW5pb24sYXNtLGF4aW9tLGJvb2wsXCIgK1xuICAgICAgXCJjb25jZXB0LGNvbmNlcHRfbWFwLGNvbnN0X2Nhc3QsY29uc3RleHByLGRlY2x0eXBlLGRlbGVnYXRlLFwiICtcbiAgICAgIFwiZHluYW1pY19jYXN0LGV4cGxpY2l0LGV4cG9ydCxmcmllbmQsZ2VuZXJpYyxsYXRlX2NoZWNrLFwiICtcbiAgICAgIFwibXV0YWJsZSxuYW1lc3BhY2UsbnVsbHB0cixwcm9wZXJ0eSxyZWludGVycHJldF9jYXN0LHN0YXRpY19hc3NlcnQsXCIgK1xuICAgICAgXCJzdGF0aWNfY2FzdCx0ZW1wbGF0ZSx0eXBlaWQsdHlwZW5hbWUsdXNpbmcsdmlydHVhbCx3aGVyZVwiXTtcbiAgdmFyIEpBVkFfS0VZV09SRFMgPSBbQ09NTU9OX0tFWVdPUkRTLFxuICAgICAgXCJhYnN0cmFjdCxhc3NlcnQsYm9vbGVhbixieXRlLGV4dGVuZHMsZmluYWwsZmluYWxseSxpbXBsZW1lbnRzLGltcG9ydCxcIiArXG4gICAgICBcImluc3RhbmNlb2YsaW50ZXJmYWNlLG51bGwsbmF0aXZlLHBhY2thZ2Usc3RyaWN0ZnAsc3VwZXIsc3luY2hyb25pemVkLFwiICtcbiAgICAgIFwidGhyb3dzLHRyYW5zaWVudFwiXTtcbiAgdmFyIENTSEFSUF9LRVlXT1JEUyA9IFtKQVZBX0tFWVdPUkRTLFxuICAgICAgXCJhcyxiYXNlLGJ5LGNoZWNrZWQsZGVjaW1hbCxkZWxlZ2F0ZSxkZXNjZW5kaW5nLGR5bmFtaWMsZXZlbnQsXCIgK1xuICAgICAgXCJmaXhlZCxmb3JlYWNoLGZyb20sZ3JvdXAsaW1wbGljaXQsaW4saW50ZXJuYWwsaW50byxpcyxsZXQsXCIgK1xuICAgICAgXCJsb2NrLG9iamVjdCxvdXQsb3ZlcnJpZGUsb3JkZXJieSxwYXJhbXMscGFydGlhbCxyZWFkb25seSxyZWYsc2J5dGUsXCIgK1xuICAgICAgXCJzZWFsZWQsc3RhY2thbGxvYyxzdHJpbmcsc2VsZWN0LHVpbnQsdWxvbmcsdW5jaGVja2VkLHVuc2FmZSx1c2hvcnQsXCIgK1xuICAgICAgXCJ2YXIsdmlydHVhbCx3aGVyZVwiXTtcbiAgdmFyIENPRkZFRV9LRVlXT1JEUyA9IFwiYWxsLGFuZCxieSxjYXRjaCxjbGFzcyxlbHNlLGV4dGVuZHMsZmFsc2UsZmluYWxseSxcIiArXG4gICAgICBcImZvcixpZixpbixpcyxpc250LGxvb3AsbmV3LG5vLG5vdCxudWxsLG9mLG9mZixvbixvcixyZXR1cm4sc3VwZXIsdGhlbixcIiArXG4gICAgICBcInRocm93LHRydWUsdHJ5LHVubGVzcyx1bnRpbCx3aGVuLHdoaWxlLHllc1wiO1xuICB2YXIgSlNDUklQVF9LRVlXT1JEUyA9IFtDT01NT05fS0VZV09SRFMsXG4gICAgICBcImRlYnVnZ2VyLGV2YWwsZXhwb3J0LGZ1bmN0aW9uLGdldCxudWxsLHNldCx1bmRlZmluZWQsdmFyLHdpdGgsXCIgK1xuICAgICAgXCJJbmZpbml0eSxOYU5cIl07XG4gIHZhciBQRVJMX0tFWVdPUkRTID0gXCJjYWxsZXIsZGVsZXRlLGRpZSxkbyxkdW1wLGVsc2lmLGV2YWwsZXhpdCxmb3JlYWNoLGZvcixcIiArXG4gICAgICBcImdvdG8saWYsaW1wb3J0LGxhc3QsbG9jYWwsbXksbmV4dCxubyxvdXIscHJpbnQscGFja2FnZSxyZWRvLHJlcXVpcmUsXCIgK1xuICAgICAgXCJzdWIsdW5kZWYsdW5sZXNzLHVudGlsLHVzZSx3YW50YXJyYXksd2hpbGUsQkVHSU4sRU5EXCI7XG4gIHZhciBQWVRIT05fS0VZV09SRFMgPSBbRkxPV19DT05UUk9MX0tFWVdPUkRTLCBcImFuZCxhcyxhc3NlcnQsY2xhc3MsZGVmLGRlbCxcIiArXG4gICAgICBcImVsaWYsZXhjZXB0LGV4ZWMsZmluYWxseSxmcm9tLGdsb2JhbCxpbXBvcnQsaW4saXMsbGFtYmRhLFwiICtcbiAgICAgIFwibm9ubG9jYWwsbm90LG9yLHBhc3MscHJpbnQscmFpc2UsdHJ5LHdpdGgseWllbGQsXCIgK1xuICAgICAgXCJGYWxzZSxUcnVlLE5vbmVcIl07XG4gIHZhciBSVUJZX0tFWVdPUkRTID0gW0ZMT1dfQ09OVFJPTF9LRVlXT1JEUywgXCJhbGlhcyxhbmQsYmVnaW4sY2FzZSxjbGFzcyxcIiArXG4gICAgICBcImRlZixkZWZpbmVkLGVsc2lmLGVuZCxlbnN1cmUsZmFsc2UsaW4sbW9kdWxlLG5leHQsbmlsLG5vdCxvcixyZWRvLFwiICtcbiAgICAgIFwicmVzY3VlLHJldHJ5LHNlbGYsc3VwZXIsdGhlbix0cnVlLHVuZGVmLHVubGVzcyx1bnRpbCx3aGVuLHlpZWxkLFwiICtcbiAgICAgIFwiQkVHSU4sRU5EXCJdO1xuICAgdmFyIFJVU1RfS0VZV09SRFMgPSBbRkxPV19DT05UUk9MX0tFWVdPUkRTLCBcImFzLGFzc2VydCxjb25zdCxjb3B5LGRyb3AsXCIgK1xuICAgICAgXCJlbnVtLGV4dGVybixmYWlsLGZhbHNlLGZuLGltcGwsbGV0LGxvZyxsb29wLG1hdGNoLG1vZCxtb3ZlLG11dCxwcml2LFwiICtcbiAgICAgIFwicHViLHB1cmUscmVmLHNlbGYsc3RhdGljLHN0cnVjdCx0cnVlLHRyYWl0LHR5cGUsdW5zYWZlLHVzZVwiXTtcbiAgdmFyIFNIX0tFWVdPUkRTID0gW0ZMT1dfQ09OVFJPTF9LRVlXT1JEUywgXCJjYXNlLGRvbmUsZWxpZixlc2FjLGV2YWwsZmksXCIgK1xuICAgICAgXCJmdW5jdGlvbixpbixsb2NhbCxzZXQsdGhlbix1bnRpbFwiXTtcbiAgdmFyIEFMTF9LRVlXT1JEUyA9IFtcbiAgICAgIENQUF9LRVlXT1JEUywgQ1NIQVJQX0tFWVdPUkRTLCBKU0NSSVBUX0tFWVdPUkRTLCBQRVJMX0tFWVdPUkRTLFxuICAgICAgUFlUSE9OX0tFWVdPUkRTLCBSVUJZX0tFWVdPUkRTLCBTSF9LRVlXT1JEU107XG4gIHZhciBDX1RZUEVTID0gL14oRElSfEZJTEV8dmVjdG9yfChkZXxwcmlvcml0eV8pP3F1ZXVlfGxpc3R8c3RhY2t8KGNvbnN0Xyk/aXRlcmF0b3J8KG11bHRpKT8oc2V0fG1hcCl8Yml0c2V0fHU/KGludHxmbG9hdClcXGQqKVxcYi87XG5cbiAgLy8gdG9rZW4gc3R5bGUgbmFtZXMuICBjb3JyZXNwb25kIHRvIGNzcyBjbGFzc2VzXG4gIC8qKlxuICAgKiB0b2tlbiBzdHlsZSBmb3IgYSBzdHJpbmcgbGl0ZXJhbFxuICAgKiBAY29uc3RcbiAgICovXG4gIHZhciBQUl9TVFJJTkcgPSAnc3RyJztcbiAgLyoqXG4gICAqIHRva2VuIHN0eWxlIGZvciBhIGtleXdvcmRcbiAgICogQGNvbnN0XG4gICAqL1xuICB2YXIgUFJfS0VZV09SRCA9ICdrd2QnO1xuICAvKipcbiAgICogdG9rZW4gc3R5bGUgZm9yIGEgY29tbWVudFxuICAgKiBAY29uc3RcbiAgICovXG4gIHZhciBQUl9DT01NRU5UID0gJ2NvbSc7XG4gIC8qKlxuICAgKiB0b2tlbiBzdHlsZSBmb3IgYSB0eXBlXG4gICAqIEBjb25zdFxuICAgKi9cbiAgdmFyIFBSX1RZUEUgPSAndHlwJztcbiAgLyoqXG4gICAqIHRva2VuIHN0eWxlIGZvciBhIGxpdGVyYWwgdmFsdWUuICBlLmcuIDEsIG51bGwsIHRydWUuXG4gICAqIEBjb25zdFxuICAgKi9cbiAgdmFyIFBSX0xJVEVSQUwgPSAnbGl0JztcbiAgLyoqXG4gICAqIHRva2VuIHN0eWxlIGZvciBhIHB1bmN0dWF0aW9uIHN0cmluZy5cbiAgICogQGNvbnN0XG4gICAqL1xuICB2YXIgUFJfUFVOQ1RVQVRJT04gPSAncHVuJztcbiAgLyoqXG4gICAqIHRva2VuIHN0eWxlIGZvciBwbGFpbiB0ZXh0LlxuICAgKiBAY29uc3RcbiAgICovXG4gIHZhciBQUl9QTEFJTiA9ICdwbG4nO1xuXG4gIC8qKlxuICAgKiB0b2tlbiBzdHlsZSBmb3IgYW4gc2dtbCB0YWcuXG4gICAqIEBjb25zdFxuICAgKi9cbiAgdmFyIFBSX1RBRyA9ICd0YWcnO1xuICAvKipcbiAgICogdG9rZW4gc3R5bGUgZm9yIGEgbWFya3VwIGRlY2xhcmF0aW9uIHN1Y2ggYXMgYSBET0NUWVBFLlxuICAgKiBAY29uc3RcbiAgICovXG4gIHZhciBQUl9ERUNMQVJBVElPTiA9ICdkZWMnO1xuICAvKipcbiAgICogdG9rZW4gc3R5bGUgZm9yIGVtYmVkZGVkIHNvdXJjZS5cbiAgICogQGNvbnN0XG4gICAqL1xuICB2YXIgUFJfU09VUkNFID0gJ3NyYyc7XG4gIC8qKlxuICAgKiB0b2tlbiBzdHlsZSBmb3IgYW4gc2dtbCBhdHRyaWJ1dGUgbmFtZS5cbiAgICogQGNvbnN0XG4gICAqL1xuICB2YXIgUFJfQVRUUklCX05BTUUgPSAnYXRuJztcbiAgLyoqXG4gICAqIHRva2VuIHN0eWxlIGZvciBhbiBzZ21sIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogQGNvbnN0XG4gICAqL1xuICB2YXIgUFJfQVRUUklCX1ZBTFVFID0gJ2F0dic7XG5cbiAgLyoqXG4gICAqIEEgY2xhc3MgdGhhdCBpbmRpY2F0ZXMgYSBzZWN0aW9uIG9mIG1hcmt1cCB0aGF0IGlzIG5vdCBjb2RlLCBlLmcuIHRvIGFsbG93XG4gICAqIGVtYmVkZGluZyBvZiBsaW5lIG51bWJlcnMgd2l0aGluIGNvZGUgbGlzdGluZ3MuXG4gICAqIEBjb25zdFxuICAgKi9cbiAgdmFyIFBSX05PQ09ERSA9ICdub2NvZGUnO1xuXG4gIFxuICBcbiAgLyoqXG4gICAqIEEgc2V0IG9mIHRva2VucyB0aGF0IGNhbiBwcmVjZWRlIGEgcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwgaW5cbiAgICogamF2YXNjcmlwdFxuICAgKiBodHRwOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDA3MDcxNzE0MjUxNS9odHRwOi8vd3d3Lm1vemlsbGEub3JnL2pzL2xhbmd1YWdlL2pzMjAvcmF0aW9uYWxlL3N5bnRheC5odG1sXG4gICAqIGhhcyB0aGUgZnVsbCBsaXN0LCBidXQgSSd2ZSByZW1vdmVkIG9uZXMgdGhhdCBtaWdodCBiZSBwcm9ibGVtYXRpYyB3aGVuXG4gICAqIHNlZW4gaW4gbGFuZ3VhZ2VzIHRoYXQgZG9uJ3Qgc3VwcG9ydCByZWd1bGFyIGV4cHJlc3Npb24gbGl0ZXJhbHMuXG4gICAqXG4gICAqIDxwPlNwZWNpZmljYWxseSwgSSd2ZSByZW1vdmVkIGFueSBrZXl3b3JkcyB0aGF0IGNhbid0IHByZWNlZGUgYSByZWdleHBcbiAgICogbGl0ZXJhbCBpbiBhIHN5bnRhY3RpY2FsbHkgbGVnYWwgamF2YXNjcmlwdCBwcm9ncmFtLCBhbmQgSSd2ZSByZW1vdmVkIHRoZVxuICAgKiBcImluXCIga2V5d29yZCBzaW5jZSBpdCdzIG5vdCBhIGtleXdvcmQgaW4gbWFueSBsYW5ndWFnZXMsIGFuZCBtaWdodCBiZSB1c2VkXG4gICAqIGFzIGEgY291bnQgb2YgaW5jaGVzLlxuICAgKlxuICAgKiA8cD5UaGUgbGluayBhYm92ZSBkb2VzIG5vdCBhY2N1cmF0ZWx5IGRlc2NyaWJlIEVjbWFTY3JpcHQgcnVsZXMgc2luY2VcbiAgICogaXQgZmFpbHMgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiAoYT0rKy9iL2kpIGFuZCAoYSsrL2IvaSkgYnV0IGl0IHdvcmtzXG4gICAqIHZlcnkgd2VsbCBpbiBwcmFjdGljZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQGNvbnN0XG4gICAqL1xuICB2YXIgUkVHRVhQX1BSRUNFREVSX1BBVFRFUk4gPSAnKD86Xl5cXFxcLj98WystXXxbIT1dPT89P3xcXFxcI3wlPT98JiY/PT98XFxcXCh8XFxcXCo9P3xbK1xcXFwtXT18LT58XFxcXC89P3w6Oj98PDw/PT98Pj4/Pj89P3wsfDt8XFxcXD98QHxcXFxcW3x+fHt8XFxcXF5cXFxcXj89P3xcXFxcfFxcXFx8Pz0/fGJyZWFrfGNhc2V8Y29udGludWV8ZGVsZXRlfGRvfGVsc2V8ZmluYWxseXxpbnN0YW5jZW9mfHJldHVybnx0aHJvd3x0cnl8dHlwZW9mKVxcXFxzKic7XG4gIFxuICAvLyBDQVZFQVQ6IHRoaXMgZG9lcyBub3QgcHJvcGVybHkgaGFuZGxlIHRoZSBjYXNlIHdoZXJlIGEgcmVndWxhclxuICAvLyBleHByZXNzaW9uIGltbWVkaWF0ZWx5IGZvbGxvd3MgYW5vdGhlciBzaW5jZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXlcbiAgLy8gaGF2ZSBmbGFncyBmb3IgY2FzZS1zZW5zaXRpdml0eSBhbmQgdGhlIGxpa2UuICBIYXZpbmcgcmVnZXhwIHRva2Vuc1xuICAvLyBhZGphY2VudCBpcyBub3QgdmFsaWQgaW4gYW55IGxhbmd1YWdlIEknbSBhd2FyZSBvZiwgc28gSSdtIHB1bnRpbmcuXG4gIC8vIFRPRE86IG1heWJlIHN0eWxlIHNwZWNpYWwgY2hhcmFjdGVycyBpbnNpZGUgYSByZWdleHAgYXMgcHVuY3R1YXRpb24uXG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgZ3JvdXAgb2Yge0BsaW5rIFJlZ0V4cH1zLCByZXR1cm5zIGEge0Bjb2RlIFJlZ0V4cH0gdGhhdCBnbG9iYWxseVxuICAgKiBtYXRjaGVzIHRoZSB1bmlvbiBvZiB0aGUgc2V0cyBvZiBzdHJpbmdzIG1hdGNoZWQgYnkgdGhlIGlucHV0IFJlZ0V4cC5cbiAgICogU2luY2UgaXQgbWF0Y2hlcyBnbG9iYWxseSwgaWYgdGhlIGlucHV0IHN0cmluZ3MgaGF2ZSBhIHN0YXJ0LW9mLWlucHV0XG4gICAqIGFuY2hvciAoL14uLi4vKSwgaXQgaXMgaWdub3JlZCBmb3IgdGhlIHB1cnBvc2VzIG9mIHVuaW9uaW5nLlxuICAgKiBAcGFyYW0ge0FycmF5LjxSZWdFeHA+fSByZWdleHMgbm9uIG11bHRpbGluZSwgbm9uLWdsb2JhbCByZWdleHMuXG4gICAqIEByZXR1cm4ge1JlZ0V4cH0gYSBnbG9iYWwgcmVnZXguXG4gICAqL1xuICBmdW5jdGlvbiBjb21iaW5lUHJlZml4UGF0dGVybnMocmVnZXhzKSB7XG4gICAgdmFyIGNhcHR1cmVkR3JvdXBJbmRleCA9IDA7XG4gIFxuICAgIHZhciBuZWVkVG9Gb2xkQ2FzZSA9IGZhbHNlO1xuICAgIHZhciBpZ25vcmVDYXNlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSByZWdleHMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgcmVnZXggPSByZWdleHNbaV07XG4gICAgICBpZiAocmVnZXguaWdub3JlQ2FzZSkge1xuICAgICAgICBpZ25vcmVDYXNlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoL1thLXpdL2kudGVzdChyZWdleC5zb3VyY2UucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgIC9cXFxcdVswLTlhLWZdezR9fFxcXFx4WzAtOWEtZl17Mn18XFxcXFtedXhdL2dpLCAnJykpKSB7XG4gICAgICAgIG5lZWRUb0ZvbGRDYXNlID0gdHJ1ZTtcbiAgICAgICAgaWdub3JlQ2FzZSA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIFxuICAgIHZhciBlc2NhcGVDaGFyVG9Db2RlVW5pdCA9IHtcbiAgICAgICdiJzogOCxcbiAgICAgICd0JzogOSxcbiAgICAgICduJzogMHhhLFxuICAgICAgJ3YnOiAweGIsXG4gICAgICAnZic6IDB4YyxcbiAgICAgICdyJzogMHhkXG4gICAgfTtcbiAgXG4gICAgZnVuY3Rpb24gZGVjb2RlRXNjYXBlKGNoYXJzZXRQYXJ0KSB7XG4gICAgICB2YXIgY2MwID0gY2hhcnNldFBhcnQuY2hhckNvZGVBdCgwKTtcbiAgICAgIGlmIChjYzAgIT09IDkyIC8qIFxcXFwgKi8pIHtcbiAgICAgICAgcmV0dXJuIGNjMDtcbiAgICAgIH1cbiAgICAgIHZhciBjMSA9IGNoYXJzZXRQYXJ0LmNoYXJBdCgxKTtcbiAgICAgIGNjMCA9IGVzY2FwZUNoYXJUb0NvZGVVbml0W2MxXTtcbiAgICAgIGlmIChjYzApIHtcbiAgICAgICAgcmV0dXJuIGNjMDtcbiAgICAgIH0gZWxzZSBpZiAoJzAnIDw9IGMxICYmIGMxIDw9ICc3Jykge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoY2hhcnNldFBhcnQuc3Vic3RyaW5nKDEpLCA4KTtcbiAgICAgIH0gZWxzZSBpZiAoYzEgPT09ICd1JyB8fCBjMSA9PT0gJ3gnKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChjaGFyc2V0UGFydC5zdWJzdHJpbmcoMiksIDE2KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaGFyc2V0UGFydC5jaGFyQ29kZUF0KDEpO1xuICAgICAgfVxuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gZW5jb2RlRXNjYXBlKGNoYXJDb2RlKSB7XG4gICAgICBpZiAoY2hhckNvZGUgPCAweDIwKSB7XG4gICAgICAgIHJldHVybiAoY2hhckNvZGUgPCAweDEwID8gJ1xcXFx4MCcgOiAnXFxcXHgnKSArIGNoYXJDb2RlLnRvU3RyaW5nKDE2KTtcbiAgICAgIH1cbiAgICAgIHZhciBjaCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgICAgcmV0dXJuIChjaCA9PT0gJ1xcXFwnIHx8IGNoID09PSAnLScgfHwgY2ggPT09ICddJyB8fCBjaCA9PT0gJ14nKVxuICAgICAgICAgID8gXCJcXFxcXCIgKyBjaCA6IGNoO1xuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gY2FzZUZvbGRDaGFyc2V0KGNoYXJTZXQpIHtcbiAgICAgIHZhciBjaGFyc2V0UGFydHMgPSBjaGFyU2V0LnN1YnN0cmluZygxLCBjaGFyU2V0Lmxlbmd0aCAtIDEpLm1hdGNoKFxuICAgICAgICAgIG5ldyBSZWdFeHAoXG4gICAgICAgICAgICAgICdcXFxcXFxcXHVbMC05QS1GYS1mXXs0fSdcbiAgICAgICAgICAgICAgKyAnfFxcXFxcXFxceFswLTlBLUZhLWZdezJ9J1xuICAgICAgICAgICAgICArICd8XFxcXFxcXFxbMC0zXVswLTddezAsMn0nXG4gICAgICAgICAgICAgICsgJ3xcXFxcXFxcXFswLTddezEsMn0nXG4gICAgICAgICAgICAgICsgJ3xcXFxcXFxcXFtcXFxcc1xcXFxTXSdcbiAgICAgICAgICAgICAgKyAnfC0nXG4gICAgICAgICAgICAgICsgJ3xbXi1cXFxcXFxcXF0nLFxuICAgICAgICAgICAgICAnZycpKTtcbiAgICAgIHZhciByYW5nZXMgPSBbXTtcbiAgICAgIHZhciBpbnZlcnNlID0gY2hhcnNldFBhcnRzWzBdID09PSAnXic7XG4gIFxuICAgICAgdmFyIG91dCA9IFsnWyddO1xuICAgICAgaWYgKGludmVyc2UpIHsgb3V0LnB1c2goJ14nKTsgfVxuICBcbiAgICAgIGZvciAodmFyIGkgPSBpbnZlcnNlID8gMSA6IDAsIG4gPSBjaGFyc2V0UGFydHMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHZhciBwID0gY2hhcnNldFBhcnRzW2ldO1xuICAgICAgICBpZiAoL1xcXFxbYmRzd10vaS50ZXN0KHApKSB7ICAvLyBEb24ndCBtdWNrIHdpdGggbmFtZWQgZ3JvdXBzLlxuICAgICAgICAgIG91dC5wdXNoKHApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFydCA9IGRlY29kZUVzY2FwZShwKTtcbiAgICAgICAgICB2YXIgZW5kO1xuICAgICAgICAgIGlmIChpICsgMiA8IG4gJiYgJy0nID09PSBjaGFyc2V0UGFydHNbaSArIDFdKSB7XG4gICAgICAgICAgICBlbmQgPSBkZWNvZGVFc2NhcGUoY2hhcnNldFBhcnRzW2kgKyAyXSk7XG4gICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByYW5nZXMucHVzaChbc3RhcnQsIGVuZF0pO1xuICAgICAgICAgIC8vIElmIHRoZSByYW5nZSBtaWdodCBpbnRlcnNlY3QgbGV0dGVycywgdGhlbiBleHBhbmQgaXQuXG4gICAgICAgICAgLy8gVGhpcyBjYXNlIGhhbmRsaW5nIGlzIHRvbyBzaW1wbGlzdGljLlxuICAgICAgICAgIC8vIEl0IGRvZXMgbm90IGRlYWwgd2l0aCBub24tbGF0aW4gY2FzZSBmb2xkaW5nLlxuICAgICAgICAgIC8vIEl0IHdvcmtzIGZvciBsYXRpbiBzb3VyY2UgY29kZSBpZGVudGlmaWVycyB0aG91Z2guXG4gICAgICAgICAgaWYgKCEoZW5kIDwgNjUgfHwgc3RhcnQgPiAxMjIpKSB7XG4gICAgICAgICAgICBpZiAoIShlbmQgPCA2NSB8fCBzdGFydCA+IDkwKSkge1xuICAgICAgICAgICAgICByYW5nZXMucHVzaChbTWF0aC5tYXgoNjUsIHN0YXJ0KSB8IDMyLCBNYXRoLm1pbihlbmQsIDkwKSB8IDMyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShlbmQgPCA5NyB8fCBzdGFydCA+IDEyMikpIHtcbiAgICAgICAgICAgICAgcmFuZ2VzLnB1c2goW01hdGgubWF4KDk3LCBzdGFydCkgJiB+MzIsIE1hdGgubWluKGVuZCwgMTIyKSAmIH4zMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICBcbiAgICAgIC8vIFtbMSwgMTBdLCBbMywgNF0sIFs4LCAxMl0sIFsxNCwgMTRdLCBbMTYsIDE2XSwgWzE3LCAxN11dXG4gICAgICAvLyAtPiBbWzEsIDEyXSwgWzE0LCAxNF0sIFsxNiwgMTddXVxuICAgICAgcmFuZ2VzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIChhWzBdIC0gYlswXSkgfHwgKGJbMV0gIC0gYVsxXSk7IH0pO1xuICAgICAgdmFyIGNvbnNvbGlkYXRlZFJhbmdlcyA9IFtdO1xuICAgICAgdmFyIGxhc3RSYW5nZSA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHJhbmdlID0gcmFuZ2VzW2ldO1xuICAgICAgICBpZiAocmFuZ2VbMF0gPD0gbGFzdFJhbmdlWzFdICsgMSkge1xuICAgICAgICAgIGxhc3RSYW5nZVsxXSA9IE1hdGgubWF4KGxhc3RSYW5nZVsxXSwgcmFuZ2VbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGlkYXRlZFJhbmdlcy5wdXNoKGxhc3RSYW5nZSA9IHJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICBcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29uc29saWRhdGVkUmFuZ2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciByYW5nZSA9IGNvbnNvbGlkYXRlZFJhbmdlc1tpXTtcbiAgICAgICAgb3V0LnB1c2goZW5jb2RlRXNjYXBlKHJhbmdlWzBdKSk7XG4gICAgICAgIGlmIChyYW5nZVsxXSA+IHJhbmdlWzBdKSB7XG4gICAgICAgICAgaWYgKHJhbmdlWzFdICsgMSA+IHJhbmdlWzBdKSB7IG91dC5wdXNoKCctJyk7IH1cbiAgICAgICAgICBvdXQucHVzaChlbmNvZGVFc2NhcGUocmFuZ2VbMV0pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0LnB1c2goJ10nKTtcbiAgICAgIHJldHVybiBvdXQuam9pbignJyk7XG4gICAgfVxuICBcbiAgICBmdW5jdGlvbiBhbGxvd0FueXdoZXJlRm9sZENhc2VBbmRSZW51bWJlckdyb3VwcyhyZWdleCkge1xuICAgICAgLy8gU3BsaXQgaW50byBjaGFyYWN0ZXIgc2V0cywgZXNjYXBlIHNlcXVlbmNlcywgcHVuY3R1YXRpb24gc3RyaW5nc1xuICAgICAgLy8gbGlrZSAoJygnLCAnKD86JywgJyknLCAnXicpLCBhbmQgcnVucyBvZiBjaGFyYWN0ZXJzIHRoYXQgZG8gbm90XG4gICAgICAvLyBpbmNsdWRlIGFueSBvZiB0aGUgYWJvdmUuXG4gICAgICB2YXIgcGFydHMgPSByZWdleC5zb3VyY2UubWF0Y2goXG4gICAgICAgICAgbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgJyg/OidcbiAgICAgICAgICAgICAgKyAnXFxcXFsoPzpbXlxcXFx4NUNcXFxceDVEXXxcXFxcXFxcXFtcXFxcc1xcXFxTXSkqXFxcXF0nICAvLyBhIGNoYXJhY3RlciBzZXRcbiAgICAgICAgICAgICAgKyAnfFxcXFxcXFxcdVtBLUZhLWYwLTldezR9JyAgLy8gYSB1bmljb2RlIGVzY2FwZVxuICAgICAgICAgICAgICArICd8XFxcXFxcXFx4W0EtRmEtZjAtOV17Mn0nICAvLyBhIGhleCBlc2NhcGVcbiAgICAgICAgICAgICAgKyAnfFxcXFxcXFxcWzAtOV0rJyAgLy8gYSBiYWNrLXJlZmVyZW5jZSBvciBvY3RhbCBlc2NhcGVcbiAgICAgICAgICAgICAgKyAnfFxcXFxcXFxcW151eDAtOV0nICAvLyBvdGhlciBlc2NhcGUgc2VxdWVuY2VcbiAgICAgICAgICAgICAgKyAnfFxcXFwoXFxcXD9bOiE9XScgIC8vIHN0YXJ0IG9mIGEgbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICAgICArICd8W1xcXFwoXFxcXClcXFxcXl0nICAvLyBzdGFydC9lbmQgb2YgYSBncm91cCwgb3IgbGluZSBzdGFydFxuICAgICAgICAgICAgICArICd8W15cXFxceDVCXFxcXHg1Q1xcXFwoXFxcXClcXFxcXl0rJyAgLy8gcnVuIG9mIG90aGVyIGNoYXJhY3RlcnNcbiAgICAgICAgICAgICAgKyAnKScsXG4gICAgICAgICAgICAgICdnJykpO1xuICAgICAgdmFyIG4gPSBwYXJ0cy5sZW5ndGg7XG4gIFxuICAgICAgLy8gTWFwcyBjYXB0dXJlZCBncm91cCBudW1iZXJzIHRvIHRoZSBudW1iZXIgdGhleSB3aWxsIG9jY3VweSBpblxuICAgICAgLy8gdGhlIG91dHB1dCBvciB0byAtMSBpZiB0aGF0IGhhcyBub3QgYmVlbiBkZXRlcm1pbmVkLCBvciB0b1xuICAgICAgLy8gdW5kZWZpbmVkIGlmIHRoZXkgbmVlZCBub3QgYmUgY2FwdHVyaW5nIGluIHRoZSBvdXRwdXQuXG4gICAgICB2YXIgY2FwdHVyZWRHcm91cHMgPSBbXTtcbiAgXG4gICAgICAvLyBXYWxrIG92ZXIgYW5kIGlkZW50aWZ5IGJhY2sgcmVmZXJlbmNlcyB0byBidWlsZCB0aGUgY2FwdHVyZWRHcm91cHNcbiAgICAgIC8vIG1hcHBpbmcuXG4gICAgICBmb3IgKHZhciBpID0gMCwgZ3JvdXBJbmRleCA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgdmFyIHAgPSBwYXJ0c1tpXTtcbiAgICAgICAgaWYgKHAgPT09ICcoJykge1xuICAgICAgICAgIC8vIGdyb3VwcyBhcmUgMS1pbmRleGVkLCBzbyBtYXggZ3JvdXAgaW5kZXggaXMgY291bnQgb2YgJygnXG4gICAgICAgICAgKytncm91cEluZGV4O1xuICAgICAgICB9IGVsc2UgaWYgKCdcXFxcJyA9PT0gcC5jaGFyQXQoMCkpIHtcbiAgICAgICAgICB2YXIgZGVjaW1hbFZhbHVlID0gK3Auc3Vic3RyaW5nKDEpO1xuICAgICAgICAgIGlmIChkZWNpbWFsVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChkZWNpbWFsVmFsdWUgPD0gZ3JvdXBJbmRleCkge1xuICAgICAgICAgICAgICBjYXB0dXJlZEdyb3Vwc1tkZWNpbWFsVmFsdWVdID0gLTE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBSZXBsYWNlIHdpdGggYW4gdW5hbWJpZ3VvdXMgZXNjYXBlIHNlcXVlbmNlIHNvIHRoYXRcbiAgICAgICAgICAgICAgLy8gYW4gb2N0YWwgZXNjYXBlIHNlcXVlbmNlIGRvZXMgbm90IHR1cm4gaW50byBhIGJhY2tyZWZlcmVuY2VcbiAgICAgICAgICAgICAgLy8gdG8gYSBjYXB0dXJpbmcgZ3JvdXAgZnJvbSBhbiBlYXJsaWVyIHJlZ2V4LlxuICAgICAgICAgICAgICBwYXJ0c1tpXSA9IGVuY29kZUVzY2FwZShkZWNpbWFsVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICBcbiAgICAgIC8vIFJlbnVtYmVyIGdyb3VwcyBhbmQgcmVkdWNlIGNhcHR1cmluZyBncm91cHMgdG8gbm9uLWNhcHR1cmluZyBncm91cHNcbiAgICAgIC8vIHdoZXJlIHBvc3NpYmxlLlxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBjYXB0dXJlZEdyb3Vwcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoLTEgPT09IGNhcHR1cmVkR3JvdXBzW2ldKSB7XG4gICAgICAgICAgY2FwdHVyZWRHcm91cHNbaV0gPSArK2NhcHR1cmVkR3JvdXBJbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGdyb3VwSW5kZXggPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHZhciBwID0gcGFydHNbaV07XG4gICAgICAgIGlmIChwID09PSAnKCcpIHtcbiAgICAgICAgICArK2dyb3VwSW5kZXg7XG4gICAgICAgICAgaWYgKCFjYXB0dXJlZEdyb3Vwc1tncm91cEluZGV4XSkge1xuICAgICAgICAgICAgcGFydHNbaV0gPSAnKD86JztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoJ1xcXFwnID09PSBwLmNoYXJBdCgwKSkge1xuICAgICAgICAgIHZhciBkZWNpbWFsVmFsdWUgPSArcC5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgaWYgKGRlY2ltYWxWYWx1ZSAmJiBkZWNpbWFsVmFsdWUgPD0gZ3JvdXBJbmRleCkge1xuICAgICAgICAgICAgcGFydHNbaV0gPSAnXFxcXCcgKyBjYXB0dXJlZEdyb3Vwc1tkZWNpbWFsVmFsdWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICBcbiAgICAgIC8vIFJlbW92ZSBhbnkgcHJlZml4IGFuY2hvcnMgc28gdGhhdCB0aGUgb3V0cHV0IHdpbGwgbWF0Y2ggYW55d2hlcmUuXG4gICAgICAvLyBeXiByZWFsbHkgZG9lcyBtZWFuIGFuIGFuY2hvcmVkIG1hdGNoIHRob3VnaC5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgnXicgPT09IHBhcnRzW2ldICYmICdeJyAhPT0gcGFydHNbaSArIDFdKSB7IHBhcnRzW2ldID0gJyc7IH1cbiAgICAgIH1cbiAgXG4gICAgICAvLyBFeHBhbmQgbGV0dGVycyB0byBncm91cHMgdG8gaGFuZGxlIG1peGluZyBvZiBjYXNlLXNlbnNpdGl2ZSBhbmRcbiAgICAgIC8vIGNhc2UtaW5zZW5zaXRpdmUgcGF0dGVybnMgaWYgbmVjZXNzYXJ5LlxuICAgICAgaWYgKHJlZ2V4Lmlnbm9yZUNhc2UgJiYgbmVlZFRvRm9sZENhc2UpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICB2YXIgcCA9IHBhcnRzW2ldO1xuICAgICAgICAgIHZhciBjaDAgPSBwLmNoYXJBdCgwKTtcbiAgICAgICAgICBpZiAocC5sZW5ndGggPj0gMiAmJiBjaDAgPT09ICdbJykge1xuICAgICAgICAgICAgcGFydHNbaV0gPSBjYXNlRm9sZENoYXJzZXQocCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaDAgIT09ICdcXFxcJykge1xuICAgICAgICAgICAgLy8gVE9ETzogaGFuZGxlIGxldHRlcnMgaW4gbnVtZXJpYyBlc2NhcGVzLlxuICAgICAgICAgICAgcGFydHNbaV0gPSBwLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgL1thLXpBLVpdL2csXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGNoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgY2MgPSBjaC5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuICdbJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoY2MgJiB+MzIsIGNjIHwgMzIpICsgJ10nO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICBcbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbiAgICB9XG4gIFxuICAgIHZhciByZXdyaXR0ZW4gPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHJlZ2V4cy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciByZWdleCA9IHJlZ2V4c1tpXTtcbiAgICAgIGlmIChyZWdleC5nbG9iYWwgfHwgcmVnZXgubXVsdGlsaW5lKSB7IHRocm93IG5ldyBFcnJvcignJyArIHJlZ2V4KTsgfVxuICAgICAgcmV3cml0dGVuLnB1c2goXG4gICAgICAgICAgJyg/OicgKyBhbGxvd0FueXdoZXJlRm9sZENhc2VBbmRSZW51bWJlckdyb3VwcyhyZWdleCkgKyAnKScpO1xuICAgIH1cbiAgXG4gICAgcmV0dXJuIG5ldyBSZWdFeHAocmV3cml0dGVuLmpvaW4oJ3wnKSwgaWdub3JlQ2FzZSA/ICdnaScgOiAnZycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0IG1hcmt1cCBpbnRvIGEgc3RyaW5nIG9mIHNvdXJjZSBjb2RlIGFuZCBhbiBhcnJheSBtYXBwaW5nIHJhbmdlcyBpblxuICAgKiB0aGF0IHN0cmluZyB0byB0aGUgdGV4dCBub2RlcyBpbiB3aGljaCB0aGV5IGFwcGVhci5cbiAgICpcbiAgICogPHA+XG4gICAqIFRoZSBIVE1MIERPTSBzdHJ1Y3R1cmU6PC9wPlxuICAgKiA8cHJlPlxuICAgKiAoRWxlbWVudCAgIFwicFwiXG4gICAqICAgKEVsZW1lbnQgXCJiXCJcbiAgICogICAgIChUZXh0ICBcInByaW50IFwiKSkgICAgICAgOyAjMVxuICAgKiAgIChUZXh0ICAgIFwiJ0hlbGxvICdcIikgICAgICA7ICMyXG4gICAqICAgKEVsZW1lbnQgXCJiclwiKSAgICAgICAgICAgIDsgIzNcbiAgICogICAoVGV4dCAgICBcIiAgKyAnV29ybGQnO1wiKSkgOyAjNFxuICAgKiA8L3ByZT5cbiAgICogPHA+XG4gICAqIGNvcnJlc3BvbmRzIHRvIHRoZSBIVE1MXG4gICAqIHtAY29kZSA8cD48Yj5wcmludCA8L2I+J0hlbGxvICc8YnI+ICArICdXb3JsZCc7PC9wPn0uPC9wPlxuICAgKlxuICAgKiA8cD5cbiAgICogSXQgd2lsbCBwcm9kdWNlIHRoZSBvdXRwdXQ6PC9wPlxuICAgKiA8cHJlPlxuICAgKiB7XG4gICAqICAgc291cmNlQ29kZTogXCJwcmludCAnSGVsbG8gJ1xcbiAgKyAnV29ybGQnO1wiLFxuICAgKiAgIC8vICAgICAgICAgICAgICAgICAgICAgMSAgICAgICAgICAyXG4gICAqICAgLy8gICAgICAgICAgIDAxMjM0NTY3ODkwMTIzNCA1Njc4OTAxMjM0NTY3XG4gICAqICAgc3BhbnM6IFswLCAjMSwgNiwgIzIsIDE0LCAjMywgMTUsICM0XVxuICAgKiB9XG4gICAqIDwvcHJlPlxuICAgKiA8cD5cbiAgICogd2hlcmUgIzEgaXMgYSByZWZlcmVuY2UgdG8gdGhlIHtAY29kZSBcInByaW50IFwifSB0ZXh0IG5vZGUgYWJvdmUsIGFuZCBzb1xuICAgKiBvbiBmb3IgdGhlIG90aGVyIHRleHQgbm9kZXMuXG4gICAqIDwvcD5cbiAgICpcbiAgICogPHA+XG4gICAqIFRoZSB7QGNvZGV9IHNwYW5zIGFycmF5IGlzIGFuIGFycmF5IG9mIHBhaXJzLiAgRXZlbiBlbGVtZW50cyBhcmUgdGhlIHN0YXJ0XG4gICAqIGluZGljZXMgb2Ygc3Vic3RyaW5ncywgYW5kIG9kZCBlbGVtZW50cyBhcmUgdGhlIHRleHQgbm9kZXMgKG9yIEJSIGVsZW1lbnRzKVxuICAgKiB0aGF0IGNvbnRhaW4gdGhlIHRleHQgZm9yIHRob3NlIHN1YnN0cmluZ3MuXG4gICAqIFN1YnN0cmluZ3MgY29udGludWUgdW50aWwgdGhlIG5leHQgaW5kZXggb3IgdGhlIGVuZCBvZiB0aGUgc291cmNlLlxuICAgKiA8L3A+XG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBhbiBIVE1MIERPTSBzdWJ0cmVlIGNvbnRhaW5pbmcgc291cmNlLWNvZGUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNQcmVmb3JtYXR0ZWQgdHJ1ZSBpZiB3aGl0ZS1zcGFjZSBpbiB0ZXh0IG5vZGVzIHNob3VsZFxuICAgKiAgICBiZSBjb25zaWRlcmVkIHNpZ25pZmljYW50LlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IHNvdXJjZSBjb2RlIGFuZCB0aGUgdGV4dCBub2RlcyBpbiB3aGljaCB0aGV5IG9jY3VyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXh0cmFjdFNvdXJjZVNwYW5zKG5vZGUsIGlzUHJlZm9ybWF0dGVkKSB7XG4gICAgdmFyIG5vY29kZSA9IC8oPzpefFxccylub2NvZGUoPzpcXHN8JCkvO1xuICBcbiAgICB2YXIgY2h1bmtzID0gW107XG4gICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgdmFyIHNwYW5zID0gW107XG4gICAgdmFyIGsgPSAwO1xuICBcbiAgICBmdW5jdGlvbiB3YWxrKG5vZGUpIHtcbiAgICAgIHZhciB0eXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgICAgIGlmICh0eXBlID09IDEpIHsgIC8vIEVsZW1lbnRcbiAgICAgICAgaWYgKG5vY29kZS50ZXN0KG5vZGUuY2xhc3NOYW1lKSkgeyByZXR1cm47IH1cbiAgICAgICAgZm9yICh2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7IGNoaWxkOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgd2FsayhjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5vZGVOYW1lID0gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoJ2JyJyA9PT0gbm9kZU5hbWUgfHwgJ2xpJyA9PT0gbm9kZU5hbWUpIHtcbiAgICAgICAgICBjaHVua3Nba10gPSAnXFxuJztcbiAgICAgICAgICBzcGFuc1trIDw8IDFdID0gbGVuZ3RoKys7XG4gICAgICAgICAgc3BhbnNbKGsrKyA8PCAxKSB8IDFdID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09IDMgfHwgdHlwZSA9PSA0KSB7ICAvLyBUZXh0XG4gICAgICAgIHZhciB0ZXh0ID0gbm9kZS5ub2RlVmFsdWU7XG4gICAgICAgIGlmICh0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgIGlmICghaXNQcmVmb3JtYXR0ZWQpIHtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1sgXFx0XFxyXFxuXSsvZywgJyAnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxyXFxuPy9nLCAnXFxuJyk7ICAvLyBOb3JtYWxpemUgbmV3bGluZXMuXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFRPRE86IGhhbmRsZSB0YWJzIGhlcmU/XG4gICAgICAgICAgY2h1bmtzW2tdID0gdGV4dDtcbiAgICAgICAgICBzcGFuc1trIDw8IDFdID0gbGVuZ3RoO1xuICAgICAgICAgIGxlbmd0aCArPSB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgICBzcGFuc1soaysrIDw8IDEpIHwgMV0gPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICBcbiAgICB3YWxrKG5vZGUpO1xuICBcbiAgICByZXR1cm4ge1xuICAgICAgc291cmNlQ29kZTogY2h1bmtzLmpvaW4oJycpLnJlcGxhY2UoL1xcbiQvLCAnJyksXG4gICAgICBzcGFuczogc3BhbnNcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGx5IHRoZSBnaXZlbiBsYW5ndWFnZSBoYW5kbGVyIHRvIHNvdXJjZUNvZGUgYW5kIGFkZCB0aGUgcmVzdWx0aW5nXG4gICAqIGRlY29yYXRpb25zIHRvIG91dC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGJhc2VQb3MgdGhlIGluZGV4IG9mIHNvdXJjZUNvZGUgd2l0aGluIHRoZSBjaHVuayBvZiBzb3VyY2VcbiAgICogICAgd2hvc2UgZGVjb3JhdGlvbnMgYXJlIGFscmVhZHkgcHJlc2VudCBvbiBvdXQuXG4gICAqL1xuICBmdW5jdGlvbiBhcHBlbmREZWNvcmF0aW9ucyhiYXNlUG9zLCBzb3VyY2VDb2RlLCBsYW5nSGFuZGxlciwgb3V0KSB7XG4gICAgaWYgKCFzb3VyY2VDb2RlKSB7IHJldHVybjsgfVxuICAgIHZhciBqb2IgPSB7XG4gICAgICBzb3VyY2VDb2RlOiBzb3VyY2VDb2RlLFxuICAgICAgYmFzZVBvczogYmFzZVBvc1xuICAgIH07XG4gICAgbGFuZ0hhbmRsZXIoam9iKTtcbiAgICBvdXQucHVzaC5hcHBseShvdXQsIGpvYi5kZWNvcmF0aW9ucyk7XG4gIH1cblxuICB2YXIgbm90V3MgPSAvXFxTLztcblxuICAvKipcbiAgICogR2l2ZW4gYW4gZWxlbWVudCwgaWYgaXQgY29udGFpbnMgb25seSBvbmUgY2hpbGQgZWxlbWVudCBhbmQgYW55IHRleHQgbm9kZXNcbiAgICogaXQgY29udGFpbnMgY29udGFpbiBvbmx5IHNwYWNlIGNoYXJhY3RlcnMsIHJldHVybiB0aGUgc29sZSBjaGlsZCBlbGVtZW50LlxuICAgKiBPdGhlcndpc2UgcmV0dXJucyB1bmRlZmluZWQuXG4gICAqIDxwPlxuICAgKiBUaGlzIGlzIG1lYW50IHRvIHJldHVybiB0aGUgQ09ERSBlbGVtZW50IGluIHtAY29kZSA8cHJlPjxjb2RlIC4uLj59IHdoZW5cbiAgICogdGhlcmUgaXMgYSBzaW5nbGUgY2hpbGQgZWxlbWVudCB0aGF0IGNvbnRhaW5zIGFsbCB0aGUgbm9uLXNwYWNlIHRleHR1YWxcbiAgICogY29udGVudCwgYnV0IG5vdCB0byByZXR1cm4gYW55dGhpbmcgd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGNoaWxkIGVsZW1lbnRzXG4gICAqIGFzIGluIHtAY29kZSA8cHJlPjxjb2RlPi4uLjwvY29kZT48Y29kZT4uLi48L2NvZGU+PC9wcmU+fSBvciB3aGVuIHRoZXJlXG4gICAqIGlzIHRleHR1YWwgY29udGVudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoaWxkQ29udGVudFdyYXBwZXIoZWxlbWVudCkge1xuICAgIHZhciB3cmFwcGVyID0gdW5kZWZpbmVkO1xuICAgIGZvciAodmFyIGMgPSBlbGVtZW50LmZpcnN0Q2hpbGQ7IGM7IGMgPSBjLm5leHRTaWJsaW5nKSB7XG4gICAgICB2YXIgdHlwZSA9IGMubm9kZVR5cGU7XG4gICAgICB3cmFwcGVyID0gKHR5cGUgPT09IDEpICAvLyBFbGVtZW50IE5vZGVcbiAgICAgICAgICA/ICh3cmFwcGVyID8gZWxlbWVudCA6IGMpXG4gICAgICAgICAgOiAodHlwZSA9PT0gMykgIC8vIFRleHQgTm9kZVxuICAgICAgICAgID8gKG5vdFdzLnRlc3QoYy5ub2RlVmFsdWUpID8gZWxlbWVudCA6IHdyYXBwZXIpXG4gICAgICAgICAgOiB3cmFwcGVyO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcHBlciA9PT0gZWxlbWVudCA/IHVuZGVmaW5lZCA6IHdyYXBwZXI7XG4gIH1cblxuICAvKiogR2l2ZW4gdHJpcGxlcyBvZiBbc3R5bGUsIHBhdHRlcm4sIGNvbnRleHRdIHJldHVybnMgYSBsZXhpbmcgZnVuY3Rpb24sXG4gICAgKiBUaGUgbGV4aW5nIGZ1bmN0aW9uIGludGVycHJldHMgdGhlIHBhdHRlcm5zIHRvIGZpbmQgdG9rZW4gYm91bmRhcmllcyBhbmRcbiAgICAqIHJldHVybnMgYSBkZWNvcmF0aW9uIGxpc3Qgb2YgdGhlIGZvcm1cbiAgICAqIFtpbmRleF8wLCBzdHlsZV8wLCBpbmRleF8xLCBzdHlsZV8xLCAuLi4sIGluZGV4X24sIHN0eWxlX25dXG4gICAgKiB3aGVyZSBpbmRleF9uIGlzIGFuIGluZGV4IGludG8gdGhlIHNvdXJjZUNvZGUsIGFuZCBzdHlsZV9uIGlzIGEgc3R5bGVcbiAgICAqIGNvbnN0YW50IGxpa2UgUFJfUExBSU4uICBpbmRleF9uLTEgPD0gaW5kZXhfbiwgYW5kIHN0eWxlX24tMSBhcHBsaWVzIHRvXG4gICAgKiBhbGwgY2hhcmFjdGVycyBpbiBzb3VyY2VDb2RlW2luZGV4X24tMTppbmRleF9uXS5cbiAgICAqXG4gICAgKiBUaGUgc3R5bGVQYXR0ZXJucyBpcyBhIGxpc3Qgd2hvc2UgZWxlbWVudHMgaGF2ZSB0aGUgZm9ybVxuICAgICogW3N0eWxlIDogc3RyaW5nLCBwYXR0ZXJuIDogUmVnRXhwLCBERVBSRUNBVEVELCBzaG9ydGN1dCA6IHN0cmluZ10uXG4gICAgKlxuICAgICogU3R5bGUgaXMgYSBzdHlsZSBjb25zdGFudCBsaWtlIFBSX1BMQUlOLCBvciBjYW4gYmUgYSBzdHJpbmcgb2YgdGhlXG4gICAgKiBmb3JtICdsYW5nLUZPTycsIHdoZXJlIEZPTyBpcyBhIGxhbmd1YWdlIGV4dGVuc2lvbiBkZXNjcmliaW5nIHRoZVxuICAgICogbGFuZ3VhZ2Ugb2YgdGhlIHBvcnRpb24gb2YgdGhlIHRva2VuIGluICQxIGFmdGVyIHBhdHRlcm4gZXhlY3V0ZXMuXG4gICAgKiBFLmcuLCBpZiBzdHlsZSBpcyAnbGFuZy1saXNwJywgYW5kIGdyb3VwIDEgY29udGFpbnMgdGhlIHRleHRcbiAgICAqICcoaGVsbG8gKHdvcmxkKSknLCB0aGVuIHRoYXQgcG9ydGlvbiBvZiB0aGUgdG9rZW4gd2lsbCBiZSBwYXNzZWQgdG8gdGhlXG4gICAgKiByZWdpc3RlcmVkIGxpc3AgaGFuZGxlciBmb3IgZm9ybWF0dGluZy5cbiAgICAqIFRoZSB0ZXh0IGJlZm9yZSBhbmQgYWZ0ZXIgZ3JvdXAgMSB3aWxsIGJlIHJlc3R5bGVkIHVzaW5nIHRoaXMgZGVjb3JhdG9yXG4gICAgKiBzbyBkZWNvcmF0b3JzIHNob3VsZCB0YWtlIGNhcmUgdGhhdCB0aGlzIGRvZXNuJ3QgcmVzdWx0IGluIGluZmluaXRlXG4gICAgKiByZWN1cnNpb24uICBGb3IgZXhhbXBsZSwgdGhlIEhUTUwgbGV4ZXIgcnVsZSBmb3IgU0NSSVBUIGVsZW1lbnRzIGxvb2tzXG4gICAgKiBzb21ldGhpbmcgbGlrZSBbJ2xhbmctanMnLCAvPFtzXWNyaXB0PiguKz8pPFxcL3NjcmlwdD4vXS4gIFRoaXMgbWF5IG1hdGNoXG4gICAgKiAnPHNjcmlwdD5mb28oKTxcXC9zY3JpcHQ+Jywgd2hpY2ggd291bGQgY2F1c2UgdGhlIGN1cnJlbnQgZGVjb3JhdG9yIHRvXG4gICAgKiBiZSBjYWxsZWQgd2l0aCAnPHNjcmlwdD4nIHdoaWNoIHdvdWxkIG5vdCBtYXRjaCB0aGUgc2FtZSBydWxlIHNpbmNlXG4gICAgKiBncm91cCAxIG11c3Qgbm90IGJlIGVtcHR5LCBzbyBpdCB3b3VsZCBiZSBpbnN0ZWFkIHN0eWxlZCBhcyBQUl9UQUcgYnlcbiAgICAqIHRoZSBnZW5lcmljIHRhZyBydWxlLiAgVGhlIGhhbmRsZXIgcmVnaXN0ZXJlZCBmb3IgdGhlICdqcycgZXh0ZW5zaW9uIHdvdWxkXG4gICAgKiB0aGVuIGJlIGNhbGxlZCB3aXRoICdmb28oKScsIGFuZCBmaW5hbGx5LCB0aGUgY3VycmVudCBkZWNvcmF0b3Igd291bGRcbiAgICAqIGJlIGNhbGxlZCB3aXRoICc8XFwvc2NyaXB0Picgd2hpY2ggd291bGQgbm90IG1hdGNoIHRoZSBvcmlnaW5hbCBydWxlIGFuZFxuICAgICogc28gdGhlIGdlbmVyaWMgdGFnIHJ1bGUgd291bGQgaWRlbnRpZnkgaXQgYXMgYSB0YWcuXG4gICAgKlxuICAgICogUGF0dGVybiBtdXN0IG9ubHkgbWF0Y2ggcHJlZml4ZXMsIGFuZCBpZiBpdCBtYXRjaGVzIGEgcHJlZml4LCB0aGVuIHRoYXRcbiAgICAqIG1hdGNoIGlzIGNvbnNpZGVyZWQgYSB0b2tlbiB3aXRoIHRoZSBzYW1lIHN0eWxlLlxuICAgICpcbiAgICAqIENvbnRleHQgaXMgYXBwbGllZCB0byB0aGUgbGFzdCBub24td2hpdGVzcGFjZSwgbm9uLWNvbW1lbnQgdG9rZW5cbiAgICAqIHJlY29nbml6ZWQuXG4gICAgKlxuICAgICogU2hvcnRjdXQgaXMgYW4gb3B0aW9uYWwgc3RyaW5nIG9mIGNoYXJhY3RlcnMsIGFueSBvZiB3aGljaCwgaWYgdGhlIGZpcnN0XG4gICAgKiBjaGFyYWN0ZXIsIGd1cmFudGVlIHRoYXQgdGhpcyBwYXR0ZXJuIGFuZCBvbmx5IHRoaXMgcGF0dGVybiBtYXRjaGVzLlxuICAgICpcbiAgICAqIEBwYXJhbSB7QXJyYXl9IHNob3J0Y3V0U3R5bGVQYXR0ZXJucyBwYXR0ZXJucyB0aGF0IGFsd2F5cyBzdGFydCB3aXRoXG4gICAgKiAgIGEga25vd24gY2hhcmFjdGVyLiAgTXVzdCBoYXZlIGEgc2hvcnRjdXQgc3RyaW5nLlxuICAgICogQHBhcmFtIHtBcnJheX0gZmFsbHRocm91Z2hTdHlsZVBhdHRlcm5zIHBhdHRlcm5zIHRoYXQgd2lsbCBiZSB0cmllZCBpblxuICAgICogICBvcmRlciBpZiB0aGUgc2hvcnRjdXQgb25lcyBmYWlsLiAgTWF5IGhhdmUgc2hvcnRjdXRzLlxuICAgICpcbiAgICAqIEByZXR1cm4ge2Z1bmN0aW9uIChPYmplY3QpfSBhXG4gICAgKiAgIGZ1bmN0aW9uIHRoYXQgdGFrZXMgc291cmNlIGNvZGUgYW5kIHJldHVybnMgYSBsaXN0IG9mIGRlY29yYXRpb25zLlxuICAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZVNpbXBsZUxleGVyKHNob3J0Y3V0U3R5bGVQYXR0ZXJucywgZmFsbHRocm91Z2hTdHlsZVBhdHRlcm5zKSB7XG4gICAgdmFyIHNob3J0Y3V0cyA9IHt9O1xuICAgIHZhciB0b2tlbml6ZXI7XG4gICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhbGxQYXR0ZXJucyA9IHNob3J0Y3V0U3R5bGVQYXR0ZXJucy5jb25jYXQoZmFsbHRocm91Z2hTdHlsZVBhdHRlcm5zKTtcbiAgICAgIHZhciBhbGxSZWdleHMgPSBbXTtcbiAgICAgIHZhciByZWdleEtleXMgPSB7fTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gYWxsUGF0dGVybnMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIHZhciBwYXR0ZXJuUGFydHMgPSBhbGxQYXR0ZXJuc1tpXTtcbiAgICAgICAgdmFyIHNob3J0Y3V0Q2hhcnMgPSBwYXR0ZXJuUGFydHNbM107XG4gICAgICAgIGlmIChzaG9ydGN1dENoYXJzKSB7XG4gICAgICAgICAgZm9yICh2YXIgYyA9IHNob3J0Y3V0Q2hhcnMubGVuZ3RoOyAtLWMgPj0gMDspIHtcbiAgICAgICAgICAgIHNob3J0Y3V0c1tzaG9ydGN1dENoYXJzLmNoYXJBdChjKV0gPSBwYXR0ZXJuUGFydHM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciByZWdleCA9IHBhdHRlcm5QYXJ0c1sxXTtcbiAgICAgICAgdmFyIGsgPSAnJyArIHJlZ2V4O1xuICAgICAgICBpZiAoIXJlZ2V4S2V5cy5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgIGFsbFJlZ2V4cy5wdXNoKHJlZ2V4KTtcbiAgICAgICAgICByZWdleEtleXNba10gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhbGxSZWdleHMucHVzaCgvW1xcMC1cXHVmZmZmXS8pO1xuICAgICAgdG9rZW5pemVyID0gY29tYmluZVByZWZpeFBhdHRlcm5zKGFsbFJlZ2V4cyk7XG4gICAgfSkoKTtcblxuICAgIHZhciBuUGF0dGVybnMgPSBmYWxsdGhyb3VnaFN0eWxlUGF0dGVybnMubGVuZ3RoO1xuXG4gICAgLyoqXG4gICAgICogTGV4ZXMgam9iLnNvdXJjZUNvZGUgYW5kIHByb2R1Y2VzIGFuIG91dHB1dCBhcnJheSBqb2IuZGVjb3JhdGlvbnMgb2ZcbiAgICAgKiBzdHlsZSBjbGFzc2VzIHByZWNlZGVkIGJ5IHRoZSBwb3NpdGlvbiBhdCB3aGljaCB0aGV5IHN0YXJ0IGluXG4gICAgICogam9iLnNvdXJjZUNvZGUgaW4gb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gam9iIGFuIG9iamVjdCBsaWtlIDxwcmU+e1xuICAgICAqICAgIHNvdXJjZUNvZGU6IHtzdHJpbmd9IHNvdXJjZVRleHQgcGxhaW4gdGV4dCxcbiAgICAgKiAgICBiYXNlUG9zOiB7aW50fSBwb3NpdGlvbiBvZiBqb2Iuc291cmNlQ29kZSBpbiB0aGUgbGFyZ2VyIGNodW5rIG9mXG4gICAgICogICAgICAgIHNvdXJjZUNvZGUuXG4gICAgICogfTwvcHJlPlxuICAgICAqL1xuICAgIHZhciBkZWNvcmF0ZSA9IGZ1bmN0aW9uIChqb2IpIHtcbiAgICAgIHZhciBzb3VyY2VDb2RlID0gam9iLnNvdXJjZUNvZGUsIGJhc2VQb3MgPSBqb2IuYmFzZVBvcztcbiAgICAgIC8qKiBFdmVuIGVudHJpZXMgYXJlIHBvc2l0aW9ucyBpbiBzb3VyY2UgaW4gYXNjZW5kaW5nIG9yZGVyLiAgT2RkIGVudGllc1xuICAgICAgICAqIGFyZSBzdHlsZSBtYXJrZXJzIChlLmcuLCBQUl9DT01NRU5UKSB0aGF0IHJ1biBmcm9tIHRoYXQgcG9zaXRpb24gdW50aWxcbiAgICAgICAgKiB0aGUgZW5kLlxuICAgICAgICAqIEB0eXBlIHtBcnJheS48bnVtYmVyfHN0cmluZz59XG4gICAgICAgICovXG4gICAgICB2YXIgZGVjb3JhdGlvbnMgPSBbYmFzZVBvcywgUFJfUExBSU5dO1xuICAgICAgdmFyIHBvcyA9IDA7ICAvLyBpbmRleCBpbnRvIHNvdXJjZUNvZGVcbiAgICAgIHZhciB0b2tlbnMgPSBzb3VyY2VDb2RlLm1hdGNoKHRva2VuaXplcikgfHwgW107XG4gICAgICB2YXIgc3R5bGVDYWNoZSA9IHt9O1xuXG4gICAgICBmb3IgKHZhciB0aSA9IDAsIG5Ub2tlbnMgPSB0b2tlbnMubGVuZ3RoOyB0aSA8IG5Ub2tlbnM7ICsrdGkpIHtcbiAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zW3RpXTtcbiAgICAgICAgdmFyIHN0eWxlID0gc3R5bGVDYWNoZVt0b2tlbl07XG4gICAgICAgIHZhciBtYXRjaCA9IHZvaWQgMDtcblxuICAgICAgICB2YXIgaXNFbWJlZGRlZDtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpc0VtYmVkZGVkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHBhdHRlcm5QYXJ0cyA9IHNob3J0Y3V0c1t0b2tlbi5jaGFyQXQoMCldO1xuICAgICAgICAgIGlmIChwYXR0ZXJuUGFydHMpIHtcbiAgICAgICAgICAgIG1hdGNoID0gdG9rZW4ubWF0Y2gocGF0dGVyblBhcnRzWzFdKTtcbiAgICAgICAgICAgIHN0eWxlID0gcGF0dGVyblBhcnRzWzBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5QYXR0ZXJuczsgKytpKSB7XG4gICAgICAgICAgICAgIHBhdHRlcm5QYXJ0cyA9IGZhbGx0aHJvdWdoU3R5bGVQYXR0ZXJuc1tpXTtcbiAgICAgICAgICAgICAgbWF0Y2ggPSB0b2tlbi5tYXRjaChwYXR0ZXJuUGFydHNbMV0pO1xuICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IHBhdHRlcm5QYXJ0c1swXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW1hdGNoKSB7ICAvLyBtYWtlIHN1cmUgdGhhdCB3ZSBtYWtlIHByb2dyZXNzXG4gICAgICAgICAgICAgIHN0eWxlID0gUFJfUExBSU47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNFbWJlZGRlZCA9IHN0eWxlLmxlbmd0aCA+PSA1ICYmICdsYW5nLScgPT09IHN0eWxlLnN1YnN0cmluZygwLCA1KTtcbiAgICAgICAgICBpZiAoaXNFbWJlZGRlZCAmJiAhKG1hdGNoICYmIHR5cGVvZiBtYXRjaFsxXSA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgICAgICBpc0VtYmVkZGVkID0gZmFsc2U7XG4gICAgICAgICAgICBzdHlsZSA9IFBSX1NPVVJDRTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWlzRW1iZWRkZWQpIHsgc3R5bGVDYWNoZVt0b2tlbl0gPSBzdHlsZTsgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRva2VuU3RhcnQgPSBwb3M7XG4gICAgICAgIHBvcyArPSB0b2tlbi5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFpc0VtYmVkZGVkKSB7XG4gICAgICAgICAgZGVjb3JhdGlvbnMucHVzaChiYXNlUG9zICsgdG9rZW5TdGFydCwgc3R5bGUpO1xuICAgICAgICB9IGVsc2UgeyAgLy8gVHJlYXQgZ3JvdXAgMSBhcyBhbiBlbWJlZGRlZCBibG9jayBvZiBzb3VyY2UgY29kZS5cbiAgICAgICAgICB2YXIgZW1iZWRkZWRTb3VyY2UgPSBtYXRjaFsxXTtcbiAgICAgICAgICB2YXIgZW1iZWRkZWRTb3VyY2VTdGFydCA9IHRva2VuLmluZGV4T2YoZW1iZWRkZWRTb3VyY2UpO1xuICAgICAgICAgIHZhciBlbWJlZGRlZFNvdXJjZUVuZCA9IGVtYmVkZGVkU291cmNlU3RhcnQgKyBlbWJlZGRlZFNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgaWYgKG1hdGNoWzJdKSB7XG4gICAgICAgICAgICAvLyBJZiBlbWJlZGRlZFNvdXJjZSBjYW4gYmUgYmxhbmssIHRoZW4gaXQgd291bGQgbWF0Y2ggYXQgdGhlXG4gICAgICAgICAgICAvLyBiZWdpbm5pbmcgd2hpY2ggd291bGQgY2F1c2UgdXMgdG8gaW5maW5pdGVseSByZWN1cnNlIG9uIHRoZVxuICAgICAgICAgICAgLy8gZW50aXJlIHRva2VuLCBzbyB3ZSBjYXRjaCB0aGUgcmlnaHQgY29udGV4dCBpbiBtYXRjaFsyXS5cbiAgICAgICAgICAgIGVtYmVkZGVkU291cmNlRW5kID0gdG9rZW4ubGVuZ3RoIC0gbWF0Y2hbMl0ubGVuZ3RoO1xuICAgICAgICAgICAgZW1iZWRkZWRTb3VyY2VTdGFydCA9IGVtYmVkZGVkU291cmNlRW5kIC0gZW1iZWRkZWRTb3VyY2UubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbGFuZyA9IHN0eWxlLnN1YnN0cmluZyg1KTtcbiAgICAgICAgICAvLyBEZWNvcmF0ZSB0aGUgbGVmdCBvZiB0aGUgZW1iZWRkZWQgc291cmNlXG4gICAgICAgICAgYXBwZW5kRGVjb3JhdGlvbnMoXG4gICAgICAgICAgICAgIGJhc2VQb3MgKyB0b2tlblN0YXJ0LFxuICAgICAgICAgICAgICB0b2tlbi5zdWJzdHJpbmcoMCwgZW1iZWRkZWRTb3VyY2VTdGFydCksXG4gICAgICAgICAgICAgIGRlY29yYXRlLCBkZWNvcmF0aW9ucyk7XG4gICAgICAgICAgLy8gRGVjb3JhdGUgdGhlIGVtYmVkZGVkIHNvdXJjZVxuICAgICAgICAgIGFwcGVuZERlY29yYXRpb25zKFxuICAgICAgICAgICAgICBiYXNlUG9zICsgdG9rZW5TdGFydCArIGVtYmVkZGVkU291cmNlU3RhcnQsXG4gICAgICAgICAgICAgIGVtYmVkZGVkU291cmNlLFxuICAgICAgICAgICAgICBsYW5nSGFuZGxlckZvckV4dGVuc2lvbihsYW5nLCBlbWJlZGRlZFNvdXJjZSksXG4gICAgICAgICAgICAgIGRlY29yYXRpb25zKTtcbiAgICAgICAgICAvLyBEZWNvcmF0ZSB0aGUgcmlnaHQgb2YgdGhlIGVtYmVkZGVkIHNlY3Rpb25cbiAgICAgICAgICBhcHBlbmREZWNvcmF0aW9ucyhcbiAgICAgICAgICAgICAgYmFzZVBvcyArIHRva2VuU3RhcnQgKyBlbWJlZGRlZFNvdXJjZUVuZCxcbiAgICAgICAgICAgICAgdG9rZW4uc3Vic3RyaW5nKGVtYmVkZGVkU291cmNlRW5kKSxcbiAgICAgICAgICAgICAgZGVjb3JhdGUsIGRlY29yYXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgam9iLmRlY29yYXRpb25zID0gZGVjb3JhdGlvbnM7XG4gICAgfTtcbiAgICByZXR1cm4gZGVjb3JhdGU7XG4gIH1cblxuICAvKiogcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYSBsaXN0IG9mIGRlY29yYXRpb25zIGZyb20gc291cmNlIHRleHQuXG4gICAgKlxuICAgICogVGhpcyBjb2RlIHRyZWF0cyBcIiwgJywgYW5kIGAgYXMgc3RyaW5nIGRlbGltaXRlcnMsIGFuZCBcXCBhcyBhIHN0cmluZ1xuICAgICogZXNjYXBlLiAgSXQgZG9lcyBub3QgcmVjb2duaXplIHBlcmwncyBxcSgpIHN0eWxlIHN0cmluZ3MuXG4gICAgKiBJdCBoYXMgbm8gc3BlY2lhbCBoYW5kbGluZyBmb3IgZG91YmxlIGRlbGltaXRlciBlc2NhcGVzIGFzIGluIGJhc2ljLCBvclxuICAgICogdGhlIHRyaXBsZWQgZGVsaW1pdGVycyB1c2VkIGluIHB5dGhvbiwgYnV0IHNob3VsZCB3b3JrIG9uIHRob3NlIHJlZ2FyZGxlc3NcbiAgICAqIGFsdGhvdWdoIGluIHRob3NlIGNhc2VzIGEgc2luZ2xlIHN0cmluZyBsaXRlcmFsIG1heSBiZSBicm9rZW4gdXAgaW50b1xuICAgICogbXVsdGlwbGUgYWRqYWNlbnQgc3RyaW5nIGxpdGVyYWxzLlxuICAgICpcbiAgICAqIEl0IHJlY29nbml6ZXMgQywgQysrLCBhbmQgc2hlbGwgc3R5bGUgY29tbWVudHMuXG4gICAgKlxuICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgYSBzZXQgb2Ygb3B0aW9uYWwgcGFyYW1ldGVycy5cbiAgICAqIEByZXR1cm4ge2Z1bmN0aW9uIChPYmplY3QpfSBhIGZ1bmN0aW9uIHRoYXQgZXhhbWluZXMgdGhlIHNvdXJjZSBjb2RlXG4gICAgKiAgICAgaW4gdGhlIGlucHV0IGpvYiBhbmQgYnVpbGRzIHRoZSBkZWNvcmF0aW9uIGxpc3QuXG4gICAgKi9cbiAgZnVuY3Rpb24gc291cmNlRGVjb3JhdG9yKG9wdGlvbnMpIHtcbiAgICB2YXIgc2hvcnRjdXRTdHlsZVBhdHRlcm5zID0gW10sIGZhbGx0aHJvdWdoU3R5bGVQYXR0ZXJucyA9IFtdO1xuICAgIGlmIChvcHRpb25zWyd0cmlwbGVRdW90ZWRTdHJpbmdzJ10pIHtcbiAgICAgIC8vICcnJ211bHRpLWxpbmUtc3RyaW5nJycnLCAnc2luZ2xlLWxpbmUtc3RyaW5nJywgYW5kIGRvdWJsZS1xdW90ZWRcbiAgICAgIHNob3J0Y3V0U3R5bGVQYXR0ZXJucy5wdXNoKFxuICAgICAgICAgIFtQUl9TVFJJTkcsICAvXig/OlxcJ1xcJ1xcJyg/OlteXFwnXFxcXF18XFxcXFtcXHNcXFNdfFxcJ3sxLDJ9KD89W15cXCddKSkqKD86XFwnXFwnXFwnfCQpfFxcXCJcXFwiXFxcIig/OlteXFxcIlxcXFxdfFxcXFxbXFxzXFxTXXxcXFwiezEsMn0oPz1bXlxcXCJdKSkqKD86XFxcIlxcXCJcXFwifCQpfFxcJyg/OlteXFxcXFxcJ118XFxcXFtcXHNcXFNdKSooPzpcXCd8JCl8XFxcIig/OlteXFxcXFxcXCJdfFxcXFxbXFxzXFxTXSkqKD86XFxcInwkKSkvLFxuICAgICAgICAgICBudWxsLCAnXFwnXCInXSk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zWydtdWx0aUxpbmVTdHJpbmdzJ10pIHtcbiAgICAgIC8vICdtdWx0aS1saW5lLXN0cmluZycsIFwibXVsdGktbGluZS1zdHJpbmdcIlxuICAgICAgc2hvcnRjdXRTdHlsZVBhdHRlcm5zLnB1c2goXG4gICAgICAgICAgW1BSX1NUUklORywgIC9eKD86XFwnKD86W15cXFxcXFwnXXxcXFxcW1xcc1xcU10pKig/OlxcJ3wkKXxcXFwiKD86W15cXFxcXFxcIl18XFxcXFtcXHNcXFNdKSooPzpcXFwifCQpfFxcYCg/OlteXFxcXFxcYF18XFxcXFtcXHNcXFNdKSooPzpcXGB8JCkpLyxcbiAgICAgICAgICAgbnVsbCwgJ1xcJ1wiYCddKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gJ3NpbmdsZS1saW5lLXN0cmluZycsIFwic2luZ2xlLWxpbmUtc3RyaW5nXCJcbiAgICAgIHNob3J0Y3V0U3R5bGVQYXR0ZXJucy5wdXNoKFxuICAgICAgICAgIFtQUl9TVFJJTkcsXG4gICAgICAgICAgIC9eKD86XFwnKD86W15cXFxcXFwnXFxyXFxuXXxcXFxcLikqKD86XFwnfCQpfFxcXCIoPzpbXlxcXFxcXFwiXFxyXFxuXXxcXFxcLikqKD86XFxcInwkKSkvLFxuICAgICAgICAgICBudWxsLCAnXCJcXCcnXSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zWyd2ZXJiYXRpbVN0cmluZ3MnXSkge1xuICAgICAgLy8gdmVyYmF0aW0tc3RyaW5nLWxpdGVyYWwgcHJvZHVjdGlvbiBmcm9tIHRoZSBDIyBncmFtbWFyLiAgU2VlIGlzc3VlIDkzLlxuICAgICAgZmFsbHRocm91Z2hTdHlsZVBhdHRlcm5zLnB1c2goXG4gICAgICAgICAgW1BSX1NUUklORywgL15AXFxcIig/OlteXFxcIl18XFxcIlxcXCIpKig/OlxcXCJ8JCkvLCBudWxsXSk7XG4gICAgfVxuICAgIHZhciBoYyA9IG9wdGlvbnNbJ2hhc2hDb21tZW50cyddO1xuICAgIGlmIChoYykge1xuICAgICAgaWYgKG9wdGlvbnNbJ2NTdHlsZUNvbW1lbnRzJ10pIHtcbiAgICAgICAgaWYgKGhjID4gMSkgeyAgLy8gbXVsdGlsaW5lIGhhc2ggY29tbWVudHNcbiAgICAgICAgICBzaG9ydGN1dFN0eWxlUGF0dGVybnMucHVzaChcbiAgICAgICAgICAgICAgW1BSX0NPTU1FTlQsIC9eIyg/OiMjKD86W14jXXwjKD8hIyMpKSooPzojIyN8JCl8LiopLywgbnVsbCwgJyMnXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU3RvcCBDIHByZXByb2Nlc3NvciBkZWNsYXJhdGlvbnMgYXQgYW4gdW5jbG9zZWQgb3BlbiBjb21tZW50XG4gICAgICAgICAgc2hvcnRjdXRTdHlsZVBhdHRlcm5zLnB1c2goXG4gICAgICAgICAgICAgIFtQUl9DT01NRU5ULCAvXiMoPzooPzpkZWZpbmV8ZSg/Omx8bmQpaWZ8ZWxzZXxlcnJvcnxpZm4/ZGVmfGluY2x1ZGV8bGluZXxwcmFnbWF8dW5kZWZ8d2FybmluZylcXGJ8W15cXHJcXG5dKikvLFxuICAgICAgICAgICAgICAgbnVsbCwgJyMnXSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gI2luY2x1ZGUgPHN0ZGlvLmg+XG4gICAgICAgIGZhbGx0aHJvdWdoU3R5bGVQYXR0ZXJucy5wdXNoKFxuICAgICAgICAgICAgW1BSX1NUUklORyxcbiAgICAgICAgICAgICAvXjwoPzooPzooPzpcXC5cXC5cXC8pKnxcXC8/KSg/OltcXHctXSsoPzpcXC9bXFx3LV0rKSspP1tcXHctXStcXC5oKD86aHxwcHxcXCtcXCspP3xbYS16XVxcdyopPi8sXG4gICAgICAgICAgICAgbnVsbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hvcnRjdXRTdHlsZVBhdHRlcm5zLnB1c2goW1BSX0NPTU1FTlQsIC9eI1teXFxyXFxuXSovLCBudWxsLCAnIyddKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnNbJ2NTdHlsZUNvbW1lbnRzJ10pIHtcbiAgICAgIGZhbGx0aHJvdWdoU3R5bGVQYXR0ZXJucy5wdXNoKFtQUl9DT01NRU5ULCAvXlxcL1xcL1teXFxyXFxuXSovLCBudWxsXSk7XG4gICAgICBmYWxsdGhyb3VnaFN0eWxlUGF0dGVybnMucHVzaChcbiAgICAgICAgICBbUFJfQ09NTUVOVCwgL15cXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLywgbnVsbF0pO1xuICAgIH1cbiAgICB2YXIgcmVnZXhMaXRlcmFscyA9IG9wdGlvbnNbJ3JlZ2V4TGl0ZXJhbHMnXTtcbiAgICBpZiAocmVnZXhMaXRlcmFscykge1xuICAgICAgLyoqXG4gICAgICAgKiBAY29uc3RcbiAgICAgICAqL1xuICAgICAgdmFyIHJlZ2V4RXhjbHMgPSByZWdleExpdGVyYWxzID4gMVxuICAgICAgICA/ICcnICAvLyBNdWx0aWxpbmUgcmVnZXggbGl0ZXJhbHNcbiAgICAgICAgOiAnXFxuXFxyJztcbiAgICAgIC8qKlxuICAgICAgICogQGNvbnN0XG4gICAgICAgKi9cbiAgICAgIHZhciByZWdleEFueSA9IHJlZ2V4RXhjbHMgPyAnLicgOiAnW1xcXFxTXFxcXHNdJztcbiAgICAgIC8qKlxuICAgICAgICogQGNvbnN0XG4gICAgICAgKi9cbiAgICAgIHZhciBSRUdFWF9MSVRFUkFMID0gKFxuICAgICAgICAgIC8vIEEgcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWwgc3RhcnRzIHdpdGggYSBzbGFzaCB0aGF0IGlzXG4gICAgICAgICAgLy8gbm90IGZvbGxvd2VkIGJ5ICogb3IgLyBzbyB0aGF0IGl0IGlzIG5vdCBjb25mdXNlZCB3aXRoXG4gICAgICAgICAgLy8gY29tbWVudHMuXG4gICAgICAgICAgJy8oPz1bXi8qJyArIHJlZ2V4RXhjbHMgKyAnXSknXG4gICAgICAgICAgLy8gYW5kIHRoZW4gY29udGFpbnMgYW55IG51bWJlciBvZiByYXcgY2hhcmFjdGVycyxcbiAgICAgICAgICArICcoPzpbXi9cXFxceDVCXFxcXHg1QycgKyByZWdleEV4Y2xzICsgJ10nXG4gICAgICAgICAgLy8gZXNjYXBlIHNlcXVlbmNlcyAoXFx4NUMpLFxuICAgICAgICAgICsgICAgJ3xcXFxceDVDJyArIHJlZ2V4QW55XG4gICAgICAgICAgLy8gb3Igbm9uLW5lc3RpbmcgY2hhcmFjdGVyIHNldHMgKFxceDVCXFx4NUQpO1xuICAgICAgICAgICsgICAgJ3xcXFxceDVCKD86W15cXFxceDVDXFxcXHg1RCcgKyByZWdleEV4Y2xzICsgJ10nXG4gICAgICAgICAgKyAgICAgICAgICAgICAnfFxcXFx4NUMnICsgcmVnZXhBbnkgKyAnKSooPzpcXFxceDVEfCQpKSsnXG4gICAgICAgICAgLy8gZmluYWxseSBjbG9zZWQgYnkgYSAvLlxuICAgICAgICAgICsgJy8nKTtcbiAgICAgIGZhbGx0aHJvdWdoU3R5bGVQYXR0ZXJucy5wdXNoKFxuICAgICAgICAgIFsnbGFuZy1yZWdleCcsXG4gICAgICAgICAgIFJlZ0V4cCgnXicgKyBSRUdFWFBfUFJFQ0VERVJfUEFUVEVSTiArICcoJyArIFJFR0VYX0xJVEVSQUwgKyAnKScpXG4gICAgICAgICAgIF0pO1xuICAgIH1cblxuICAgIHZhciB0eXBlcyA9IG9wdGlvbnNbJ3R5cGVzJ107XG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICBmYWxsdGhyb3VnaFN0eWxlUGF0dGVybnMucHVzaChbUFJfVFlQRSwgdHlwZXNdKTtcbiAgICB9XG5cbiAgICB2YXIga2V5d29yZHMgPSAoXCJcIiArIG9wdGlvbnNbJ2tleXdvcmRzJ10pLnJlcGxhY2UoL14gfCAkL2csICcnKTtcbiAgICBpZiAoa2V5d29yZHMubGVuZ3RoKSB7XG4gICAgICBmYWxsdGhyb3VnaFN0eWxlUGF0dGVybnMucHVzaChcbiAgICAgICAgICBbUFJfS0VZV09SRCxcbiAgICAgICAgICAgbmV3IFJlZ0V4cCgnXig/OicgKyBrZXl3b3Jkcy5yZXBsYWNlKC9bXFxzLF0rL2csICd8JykgKyAnKVxcXFxiJyksXG4gICAgICAgICAgIG51bGxdKTtcbiAgICB9XG5cbiAgICBzaG9ydGN1dFN0eWxlUGF0dGVybnMucHVzaChbUFJfUExBSU4sICAgICAgIC9eXFxzKy8sIG51bGwsICcgXFxyXFxuXFx0XFx4QTAnXSk7XG5cbiAgICB2YXIgcHVuY3R1YXRpb24gPVxuICAgICAgLy8gVGhlIEJhc2ggbWFuIHBhZ2Ugc2F5c1xuXG4gICAgICAvLyBBIHdvcmQgaXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGNvbnNpZGVyZWQgYXMgYSBzaW5nbGVcbiAgICAgIC8vIHVuaXQgYnkgR1JVQi4gV29yZHMgYXJlIHNlcGFyYXRlZCBieSBtZXRhY2hhcmFjdGVycyxcbiAgICAgIC8vIHdoaWNoIGFyZSB0aGUgZm9sbG93aW5nIHBsdXMgc3BhY2UsIHRhYiwgYW5kIG5ld2xpbmU6IHsgfVxuICAgICAgLy8gfCAmICQgOyA8ID5cbiAgICAgIC8vIC4uLlxuICAgICAgXG4gICAgICAvLyBBIHdvcmQgYmVnaW5uaW5nIHdpdGggIyBjYXVzZXMgdGhhdCB3b3JkIGFuZCBhbGwgcmVtYWluaW5nXG4gICAgICAvLyBjaGFyYWN0ZXJzIG9uIHRoYXQgbGluZSB0byBiZSBpZ25vcmVkLlxuXG4gICAgICAvLyB3aGljaCBtZWFucyB0aGF0IG9ubHkgYSAnIycgYWZ0ZXIgLyg/Ol58W3t9fCYkOzw+XFxzXSkvIHN0YXJ0cyBhXG4gICAgICAvLyBjb21tZW50IGJ1dCBlbXBpcmljYWxseVxuICAgICAgLy8gJCBlY2hvIHsjfVxuICAgICAgLy8geyN9XG4gICAgICAvLyAkIGVjaG8gXFwkI1xuICAgICAgLy8gJCNcbiAgICAgIC8vICQgZWNobyB9I1xuICAgICAgLy8gfSNcblxuICAgICAgLy8gc28gLyg/Ol58W3wmOzw+XFxzXSkvIGlzIG1vcmUgYXBwcm9wcmlhdGUuXG5cbiAgICAgIC8vIGh0dHA6Ly9nY2MuZ251Lm9yZy9vbmxpbmVkb2NzL2djYy0yLjk1LjMvY3BwXzEuaHRtbCNTRUMzXG4gICAgICAvLyBzdWdnZXN0cyB0aGF0IHRoaXMgZGVmaW5pdGlvbiBpcyBjb21wYXRpYmxlIHdpdGggYVxuICAgICAgLy8gZGVmYXVsdCBtb2RlIHRoYXQgdHJpZXMgdG8gdXNlIGEgc2luZ2xlIHRva2VuIGRlZmluaXRpb25cbiAgICAgIC8vIHRvIHJlY29nbml6ZSBib3RoIGJhc2gvcHl0aG9uIHN0eWxlIGNvbW1lbnRzIGFuZCBDXG4gICAgICAvLyBwcmVwcm9jZXNzb3IgZGlyZWN0aXZlcy5cblxuICAgICAgLy8gVGhpcyBkZWZpbml0aW9uIG9mIHB1bmN0dWF0aW9uIGRvZXMgbm90IGluY2x1ZGUgIyBpbiB0aGUgbGlzdCBvZlxuICAgICAgLy8gZm9sbG93LW9uIGV4Y2x1c2lvbnMsIHNvICMgd2lsbCBub3QgYmUgYnJva2VuIGJlZm9yZSBpZiBwcmVjZWVkZWRcbiAgICAgIC8vIGJ5IGEgcHVuY3R1YXRpb24gY2hhcmFjdGVyLiAgV2UgY291bGQgdHJ5IHRvIGV4Y2x1ZGUgIyBhZnRlclxuICAgICAgLy8gW3wmOzw+XSBidXQgdGhhdCBkb2Vzbid0IHNlZW0gdG8gY2F1c2UgbWFueSBtYWpvciBwcm9ibGVtcy5cbiAgICAgIC8vIElmIHRoYXQgZG9lcyB0dXJuIG91dCB0byBiZSBhIHByb2JsZW0sIHdlIHNob3VsZCBjaGFuZ2UgdGhlIGJlbG93XG4gICAgICAvLyB3aGVuIGhjIGlzIHRydXRoeSB0byBpbmNsdWRlICMgaW4gdGhlIHJ1biBvZiBwdW5jdHVhdGlvbiBjaGFyYWN0ZXJzXG4gICAgICAvLyBvbmx5IHdoZW4gbm90IGZvbGxvd2ludCBbfCY7PD5dLlxuICAgICAgJ14uW15cXFxcc1xcXFx3LiRAXFwnXCJgL1xcXFxcXFxcXSonO1xuICAgIGlmIChvcHRpb25zWydyZWdleExpdGVyYWxzJ10pIHtcbiAgICAgIHB1bmN0dWF0aW9uICs9ICcoPyFcXHMqXFwvKSc7XG4gICAgfVxuXG4gICAgZmFsbHRocm91Z2hTdHlsZVBhdHRlcm5zLnB1c2goXG4gICAgICAgIC8vIFRPRE8obWlrZXNhbXVlbCk6IHJlY29nbml6ZSBub24tbGF0aW4gbGV0dGVycyBhbmQgbnVtZXJhbHMgaW4gaWRlbnRzXG4gICAgICAgIFtQUl9MSVRFUkFMLCAgICAgL15AW2Etel8kXVthLXpfJEAwLTldKi9pLCBudWxsXSxcbiAgICAgICAgW1BSX1RZUEUsICAgICAgICAvXig/OltAX10/W0EtWl0rW2Etel1bQS1aYS16XyRAMC05XSp8XFx3K190XFxiKS8sIG51bGxdLFxuICAgICAgICBbUFJfUExBSU4sICAgICAgIC9eW2Etel8kXVthLXpfJEAwLTldKi9pLCBudWxsXSxcbiAgICAgICAgW1BSX0xJVEVSQUwsXG4gICAgICAgICBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgICdeKD86J1xuICAgICAgICAgICAgIC8vIEEgaGV4IG51bWJlclxuICAgICAgICAgICAgICsgJzB4W2EtZjAtOV0rJ1xuICAgICAgICAgICAgIC8vIG9yIGFuIG9jdGFsIG9yIGRlY2ltYWwgbnVtYmVyLFxuICAgICAgICAgICAgICsgJ3woPzpcXFxcZCg/Ol9cXFxcZCspKlxcXFxkKig/OlxcXFwuXFxcXGQqKT98XFxcXC5cXFxcZFxcXFwrKSdcbiAgICAgICAgICAgICAvLyBwb3NzaWJseSBpbiBzY2llbnRpZmljIG5vdGF0aW9uXG4gICAgICAgICAgICAgKyAnKD86ZVsrXFxcXC1dP1xcXFxkKyk/J1xuICAgICAgICAgICAgICsgJyknXG4gICAgICAgICAgICAgLy8gd2l0aCBhbiBvcHRpb25hbCBtb2RpZmllciBsaWtlIFVMIGZvciB1bnNpZ25lZCBsb25nXG4gICAgICAgICAgICAgKyAnW2Etel0qJywgJ2knKSxcbiAgICAgICAgIG51bGwsICcwMTIzNDU2Nzg5J10sXG4gICAgICAgIC8vIERvbid0IHRyZWF0IGVzY2FwZWQgcXVvdGVzIGluIGJhc2ggYXMgc3RhcnRpbmcgc3RyaW5ncy5cbiAgICAgICAgLy8gU2VlIGlzc3VlIDE0NC5cbiAgICAgICAgW1BSX1BMQUlOLCAgICAgICAvXlxcXFxbXFxzXFxTXT8vLCBudWxsXSxcbiAgICAgICAgW1BSX1BVTkNUVUFUSU9OLCBuZXcgUmVnRXhwKHB1bmN0dWF0aW9uKSwgbnVsbF0pO1xuXG4gICAgcmV0dXJuIGNyZWF0ZVNpbXBsZUxleGVyKHNob3J0Y3V0U3R5bGVQYXR0ZXJucywgZmFsbHRocm91Z2hTdHlsZVBhdHRlcm5zKTtcbiAgfVxuXG4gIHZhciBkZWNvcmF0ZVNvdXJjZSA9IHNvdXJjZURlY29yYXRvcih7XG4gICAgICAgICdrZXl3b3Jkcyc6IEFMTF9LRVlXT1JEUyxcbiAgICAgICAgJ2hhc2hDb21tZW50cyc6IHRydWUsXG4gICAgICAgICdjU3R5bGVDb21tZW50cyc6IHRydWUsXG4gICAgICAgICdtdWx0aUxpbmVTdHJpbmdzJzogdHJ1ZSxcbiAgICAgICAgJ3JlZ2V4TGl0ZXJhbHMnOiB0cnVlXG4gICAgICB9KTtcblxuICAvKipcbiAgICogR2l2ZW4gYSBET00gc3VidHJlZSwgd3JhcHMgaXQgaW4gYSBsaXN0LCBhbmQgcHV0cyBlYWNoIGxpbmUgaW50byBpdHMgb3duXG4gICAqIGxpc3QgaXRlbS5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIG1vZGlmaWVkIGluIHBsYWNlLiAgSXRzIGNvbnRlbnQgaXMgcHVsbGVkIGludG8gYW5cbiAgICogICAgIEhUTUxPTGlzdEVsZW1lbnQsIGFuZCBlYWNoIGxpbmUgaXMgbW92ZWQgaW50byBhIHNlcGFyYXRlIGxpc3QgaXRlbS5cbiAgICogICAgIFRoaXMgcmVxdWlyZXMgY2xvbmluZyBlbGVtZW50cywgc28gdGhlIGlucHV0IG1pZ2h0IG5vdCBoYXZlIHVuaXF1ZVxuICAgKiAgICAgSURzIGFmdGVyIG51bWJlcmluZy5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc1ByZWZvcm1hdHRlZCB0cnVlIGlmZiB3aGl0ZS1zcGFjZSBpbiB0ZXh0IG5vZGVzIHNob3VsZFxuICAgKiAgICAgYmUgdHJlYXRlZCBhcyBzaWduaWZpY2FudC5cbiAgICovXG4gIGZ1bmN0aW9uIG51bWJlckxpbmVzKG5vZGUsIG9wdF9zdGFydExpbmVOdW0sIGlzUHJlZm9ybWF0dGVkKSB7XG4gICAgdmFyIG5vY29kZSA9IC8oPzpefFxccylub2NvZGUoPzpcXHN8JCkvO1xuICAgIHZhciBsaW5lQnJlYWsgPSAvXFxyXFxuP3xcXG4vO1xuICBcbiAgICB2YXIgZG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gIFxuICAgIHZhciBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgd2hpbGUgKG5vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgbGkuYXBwZW5kQ2hpbGQobm9kZS5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgLy8gQW4gYXJyYXkgb2YgbGluZXMuICBXZSBzcGxpdCBiZWxvdywgc28gdGhpcyBpcyBpbml0aWFsaXplZCB0byBvbmVcbiAgICAvLyB1bi1zcGxpdCBsaW5lLlxuICAgIHZhciBsaXN0SXRlbXMgPSBbbGldO1xuICBcbiAgICBmdW5jdGlvbiB3YWxrKG5vZGUpIHtcbiAgICAgIHZhciB0eXBlID0gbm9kZS5ub2RlVHlwZTtcbiAgICAgIGlmICh0eXBlID09IDEgJiYgIW5vY29kZS50ZXN0KG5vZGUuY2xhc3NOYW1lKSkgeyAgLy8gRWxlbWVudFxuICAgICAgICBpZiAoJ2JyJyA9PT0gbm9kZS5ub2RlTmFtZSkge1xuICAgICAgICAgIGJyZWFrQWZ0ZXIobm9kZSk7XG4gICAgICAgICAgLy8gRGlzY2FyZCB0aGUgPEJSPiBzaW5jZSBpdCBpcyBub3cgZmx1c2ggYWdhaW5zdCBhIDwvTEk+LlxuICAgICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yICh2YXIgY2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7IGNoaWxkOyBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICB3YWxrKGNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoKHR5cGUgPT0gMyB8fCB0eXBlID09IDQpICYmIGlzUHJlZm9ybWF0dGVkKSB7ICAvLyBUZXh0XG4gICAgICAgIHZhciB0ZXh0ID0gbm9kZS5ub2RlVmFsdWU7XG4gICAgICAgIHZhciBtYXRjaCA9IHRleHQubWF0Y2gobGluZUJyZWFrKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIGZpcnN0TGluZSA9IHRleHQuc3Vic3RyaW5nKDAsIG1hdGNoLmluZGV4KTtcbiAgICAgICAgICBub2RlLm5vZGVWYWx1ZSA9IGZpcnN0TGluZTtcbiAgICAgICAgICB2YXIgdGFpbCA9IHRleHQuc3Vic3RyaW5nKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBpZiAodGFpbCkge1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoXG4gICAgICAgICAgICAgIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRhaWwpLCBub2RlLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtBZnRlcihub2RlKTtcbiAgICAgICAgICBpZiAoIWZpcnN0TGluZSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgbGVhdmUgYmxhbmsgdGV4dCBub2RlcyBpbiB0aGUgRE9NLlxuICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgXG4gICAgLy8gU3BsaXQgYSBsaW5lIGFmdGVyIHRoZSBnaXZlbiBub2RlLlxuICAgIGZ1bmN0aW9uIGJyZWFrQWZ0ZXIobGluZUVuZE5vZGUpIHtcbiAgICAgIC8vIElmIHRoZXJlJ3Mgbm90aGluZyB0byB0aGUgcmlnaHQsIHRoZW4gd2UgY2FuIHNraXAgZW5kaW5nIHRoZSBsaW5lXG4gICAgICAvLyBoZXJlLCBhbmQgbW92ZSByb290LXdhcmRzIHNpbmNlIHNwbGl0dGluZyBqdXN0IGJlZm9yZSBhbiBlbmQtdGFnXG4gICAgICAvLyB3b3VsZCByZXF1aXJlIHVzIHRvIGNyZWF0ZSBhIGJ1bmNoIG9mIGVtcHR5IGNvcGllcy5cbiAgICAgIHdoaWxlICghbGluZUVuZE5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgbGluZUVuZE5vZGUgPSBsaW5lRW5kTm9kZS5wYXJlbnROb2RlO1xuICAgICAgICBpZiAoIWxpbmVFbmROb2RlKSB7IHJldHVybjsgfVxuICAgICAgfVxuICBcbiAgICAgIGZ1bmN0aW9uIGJyZWFrTGVmdE9mKGxpbWl0LCBjb3B5KSB7XG4gICAgICAgIC8vIENsb25lIHNoYWxsb3dseSBpZiB0aGlzIG5vZGUgbmVlZHMgdG8gYmUgb24gYm90aCBzaWRlcyBvZiB0aGUgYnJlYWsuXG4gICAgICAgIHZhciByaWdodFNpZGUgPSBjb3B5ID8gbGltaXQuY2xvbmVOb2RlKGZhbHNlKSA6IGxpbWl0O1xuICAgICAgICB2YXIgcGFyZW50ID0gbGltaXQucGFyZW50Tm9kZTtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIC8vIFdlIGNsb25lIHRoZSBwYXJlbnQgY2hhaW4uXG4gICAgICAgICAgLy8gVGhpcyBoZWxwcyB1cyByZXN1cnJlY3QgaW1wb3J0YW50IHN0eWxpbmcgZWxlbWVudHMgdGhhdCBjcm9zcyBsaW5lcy5cbiAgICAgICAgICAvLyBFLmcuIGluIDxpPkZvbzxicj5CYXI8L2k+XG4gICAgICAgICAgLy8gc2hvdWxkIGJlIHJld3JpdHRlbiB0byA8bGk+PGk+Rm9vPC9pPjwvbGk+PGxpPjxpPkJhcjwvaT48L2xpPi5cbiAgICAgICAgICB2YXIgcGFyZW50Q2xvbmUgPSBicmVha0xlZnRPZihwYXJlbnQsIDEpO1xuICAgICAgICAgIC8vIE1vdmUgdGhlIGNsb25lIGFuZCBldmVyeXRoaW5nIHRvIHRoZSByaWdodCBvZiB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAvLyBvbnRvIHRoZSBjbG9uZWQgcGFyZW50LlxuICAgICAgICAgIHZhciBuZXh0ID0gbGltaXQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgcGFyZW50Q2xvbmUuYXBwZW5kQ2hpbGQocmlnaHRTaWRlKTtcbiAgICAgICAgICBmb3IgKHZhciBzaWJsaW5nID0gbmV4dDsgc2libGluZzsgc2libGluZyA9IG5leHQpIHtcbiAgICAgICAgICAgIG5leHQgPSBzaWJsaW5nLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgcGFyZW50Q2xvbmUuYXBwZW5kQ2hpbGQoc2libGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByaWdodFNpZGU7XG4gICAgICB9XG4gIFxuICAgICAgdmFyIGNvcGllZExpc3RJdGVtID0gYnJlYWtMZWZ0T2YobGluZUVuZE5vZGUubmV4dFNpYmxpbmcsIDApO1xuICBcbiAgICAgIC8vIFdhbGsgdGhlIHBhcmVudCBjaGFpbiB1bnRpbCB3ZSByZWFjaCBhbiB1bmF0dGFjaGVkIExJLlxuICAgICAgZm9yICh2YXIgcGFyZW50O1xuICAgICAgICAgICAvLyBDaGVjayBub2RlVHlwZSBzaW5jZSBJRSBpbnZlbnRzIGRvY3VtZW50IGZyYWdtZW50cy5cbiAgICAgICAgICAgKHBhcmVudCA9IGNvcGllZExpc3RJdGVtLnBhcmVudE5vZGUpICYmIHBhcmVudC5ub2RlVHlwZSA9PT0gMTspIHtcbiAgICAgICAgY29waWVkTGlzdEl0ZW0gPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICAvLyBQdXQgaXQgb24gdGhlIGxpc3Qgb2YgbGluZXMgZm9yIGxhdGVyIHByb2Nlc3NpbmcuXG4gICAgICBsaXN0SXRlbXMucHVzaChjb3BpZWRMaXN0SXRlbSk7XG4gICAgfVxuICBcbiAgICAvLyBTcGxpdCBsaW5lcyB3aGlsZSB0aGVyZSBhcmUgbGluZXMgbGVmdCB0byBzcGxpdC5cbiAgICBmb3IgKHZhciBpID0gMDsgIC8vIE51bWJlciBvZiBsaW5lcyB0aGF0IGhhdmUgYmVlbiBzcGxpdCBzbyBmYXIuXG4gICAgICAgICBpIDwgbGlzdEl0ZW1zLmxlbmd0aDsgIC8vIGxlbmd0aCB1cGRhdGVkIGJ5IGJyZWFrQWZ0ZXIgY2FsbHMuXG4gICAgICAgICArK2kpIHtcbiAgICAgIHdhbGsobGlzdEl0ZW1zW2ldKTtcbiAgICB9XG4gIFxuICAgIC8vIE1ha2Ugc3VyZSBudW1lcmljIGluZGljZXMgc2hvdyBjb3JyZWN0bHkuXG4gICAgaWYgKG9wdF9zdGFydExpbmVOdW0gPT09IChvcHRfc3RhcnRMaW5lTnVtfDApKSB7XG4gICAgICBsaXN0SXRlbXNbMF0uc2V0QXR0cmlidXRlKCd2YWx1ZScsIG9wdF9zdGFydExpbmVOdW0pO1xuICAgIH1cbiAgXG4gICAgdmFyIG9sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb2wnKTtcbiAgICBvbC5jbGFzc05hbWUgPSAnbGluZW51bXMnO1xuICAgIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCAoKG9wdF9zdGFydExpbmVOdW0gLSAxIC8qIHplcm8gaW5kZXggKi8pKSB8IDApIHx8IDA7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsaXN0SXRlbXMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBsaSA9IGxpc3RJdGVtc1tpXTtcbiAgICAgIC8vIFN0aWNrIGEgY2xhc3Mgb24gdGhlIExJcyBzbyB0aGF0IHN0eWxlc2hlZXRzIGNhblxuICAgICAgLy8gY29sb3Igb2RkL2V2ZW4gcm93cywgb3IgYW55IG90aGVyIHJvdyBwYXR0ZXJuIHRoYXRcbiAgICAgIC8vIGlzIGNvLXByaW1lIHdpdGggMTAuXG4gICAgICBsaS5jbGFzc05hbWUgPSAnTCcgKyAoKGkgKyBvZmZzZXQpICUgMTApO1xuICAgICAgaWYgKCFsaS5maXJzdENoaWxkKSB7XG4gICAgICAgIGxpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdcXHhBMCcpKTtcbiAgICAgIH1cbiAgICAgIG9sLmFwcGVuZENoaWxkKGxpKTtcbiAgICB9XG4gIFxuICAgIG5vZGUuYXBwZW5kQ2hpbGQob2wpO1xuICB9XG4gIC8qKlxuICAgKiBCcmVha3Mge0Bjb2RlIGpvYi5zb3VyY2VDb2RlfSBhcm91bmQgc3R5bGUgYm91bmRhcmllcyBpblxuICAgKiB7QGNvZGUgam9iLmRlY29yYXRpb25zfSBhbmQgbW9kaWZpZXMge0Bjb2RlIGpvYi5zb3VyY2VOb2RlfSBpbiBwbGFjZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IGpvYiBsaWtlIDxwcmU+e1xuICAgKiAgICBzb3VyY2VDb2RlOiB7c3RyaW5nfSBzb3VyY2UgYXMgcGxhaW4gdGV4dCxcbiAgICogICAgc291cmNlTm9kZToge0hUTUxFbGVtZW50fSB0aGUgZWxlbWVudCBjb250YWluaW5nIHRoZSBzb3VyY2UsXG4gICAqICAgIHNwYW5zOiB7QXJyYXkuPG51bWJlcnxOb2RlPn0gYWx0ZXJuYXRpbmcgc3BhbiBzdGFydCBpbmRpY2VzIGludG8gc291cmNlXG4gICAqICAgICAgIGFuZCB0aGUgdGV4dCBub2RlIG9yIGVsZW1lbnQgKGUuZy4ge0Bjb2RlIDxCUj59KSBjb3JyZXNwb25kaW5nIHRvIHRoYXRcbiAgICogICAgICAgc3Bhbi5cbiAgICogICAgZGVjb3JhdGlvbnM6IHtBcnJheS48bnVtYmVyfHN0cmluZ30gYW4gYXJyYXkgb2Ygc3R5bGUgY2xhc3NlcyBwcmVjZWRlZFxuICAgKiAgICAgICBieSB0aGUgcG9zaXRpb24gYXQgd2hpY2ggdGhleSBzdGFydCBpbiBqb2Iuc291cmNlQ29kZSBpbiBvcmRlclxuICAgKiB9PC9wcmU+XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiByZWNvbWJpbmVUYWdzQW5kRGVjb3JhdGlvbnMoam9iKSB7XG4gICAgdmFyIGlzSUU4T3JFYXJsaWVyID0gL1xcYk1TSUVcXHMoXFxkKykvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgaXNJRThPckVhcmxpZXIgPSBpc0lFOE9yRWFybGllciAmJiAraXNJRThPckVhcmxpZXJbMV0gPD0gODtcbiAgICB2YXIgbmV3bGluZVJlID0gL1xcbi9nO1xuICBcbiAgICB2YXIgc291cmNlID0gam9iLnNvdXJjZUNvZGU7XG4gICAgdmFyIHNvdXJjZUxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgLy8gSW5kZXggaW50byBzb3VyY2UgYWZ0ZXIgdGhlIGxhc3QgY29kZS11bml0IHJlY29tYmluZWQuXG4gICAgdmFyIHNvdXJjZUluZGV4ID0gMDtcbiAgXG4gICAgdmFyIHNwYW5zID0gam9iLnNwYW5zO1xuICAgIHZhciBuU3BhbnMgPSBzcGFucy5sZW5ndGg7XG4gICAgLy8gSW5kZXggaW50byBzcGFucyBhZnRlciB0aGUgbGFzdCBzcGFuIHdoaWNoIGVuZHMgYXQgb3IgYmVmb3JlIHNvdXJjZUluZGV4LlxuICAgIHZhciBzcGFuSW5kZXggPSAwO1xuICBcbiAgICB2YXIgZGVjb3JhdGlvbnMgPSBqb2IuZGVjb3JhdGlvbnM7XG4gICAgdmFyIG5EZWNvcmF0aW9ucyA9IGRlY29yYXRpb25zLmxlbmd0aDtcbiAgICAvLyBJbmRleCBpbnRvIGRlY29yYXRpb25zIGFmdGVyIHRoZSBsYXN0IGRlY29yYXRpb24gd2hpY2ggZW5kcyBhdCBvciBiZWZvcmVcbiAgICAvLyBzb3VyY2VJbmRleC5cbiAgICB2YXIgZGVjb3JhdGlvbkluZGV4ID0gMDtcbiAgXG4gICAgLy8gUmVtb3ZlIGFsbCB6ZXJvLWxlbmd0aCBkZWNvcmF0aW9ucy5cbiAgICBkZWNvcmF0aW9uc1tuRGVjb3JhdGlvbnNdID0gc291cmNlTGVuZ3RoO1xuICAgIHZhciBkZWNQb3MsIGk7XG4gICAgZm9yIChpID0gZGVjUG9zID0gMDsgaSA8IG5EZWNvcmF0aW9uczspIHtcbiAgICAgIGlmIChkZWNvcmF0aW9uc1tpXSAhPT0gZGVjb3JhdGlvbnNbaSArIDJdKSB7XG4gICAgICAgIGRlY29yYXRpb25zW2RlY1BvcysrXSA9IGRlY29yYXRpb25zW2krK107XG4gICAgICAgIGRlY29yYXRpb25zW2RlY1BvcysrXSA9IGRlY29yYXRpb25zW2krK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpICs9IDI7XG4gICAgICB9XG4gICAgfVxuICAgIG5EZWNvcmF0aW9ucyA9IGRlY1BvcztcbiAgXG4gICAgLy8gU2ltcGxpZnkgZGVjb3JhdGlvbnMuXG4gICAgZm9yIChpID0gZGVjUG9zID0gMDsgaSA8IG5EZWNvcmF0aW9uczspIHtcbiAgICAgIHZhciBzdGFydFBvcyA9IGRlY29yYXRpb25zW2ldO1xuICAgICAgLy8gQ29uZmxhdGUgYWxsIGFkamFjZW50IGRlY29yYXRpb25zIHRoYXQgdXNlIHRoZSBzYW1lIHN0eWxlLlxuICAgICAgdmFyIHN0YXJ0RGVjID0gZGVjb3JhdGlvbnNbaSArIDFdO1xuICAgICAgdmFyIGVuZCA9IGkgKyAyO1xuICAgICAgd2hpbGUgKGVuZCArIDIgPD0gbkRlY29yYXRpb25zICYmIGRlY29yYXRpb25zW2VuZCArIDFdID09PSBzdGFydERlYykge1xuICAgICAgICBlbmQgKz0gMjtcbiAgICAgIH1cbiAgICAgIGRlY29yYXRpb25zW2RlY1BvcysrXSA9IHN0YXJ0UG9zO1xuICAgICAgZGVjb3JhdGlvbnNbZGVjUG9zKytdID0gc3RhcnREZWM7XG4gICAgICBpID0gZW5kO1xuICAgIH1cbiAgXG4gICAgbkRlY29yYXRpb25zID0gZGVjb3JhdGlvbnMubGVuZ3RoID0gZGVjUG9zO1xuICBcbiAgICB2YXIgc291cmNlTm9kZSA9IGpvYi5zb3VyY2VOb2RlO1xuICAgIHZhciBvbGREaXNwbGF5O1xuICAgIGlmIChzb3VyY2VOb2RlKSB7XG4gICAgICBvbGREaXNwbGF5ID0gc291cmNlTm9kZS5zdHlsZS5kaXNwbGF5O1xuICAgICAgc291cmNlTm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgdmFyIGRlY29yYXRpb24gPSBudWxsO1xuICAgICAgd2hpbGUgKHNwYW5JbmRleCA8IG5TcGFucykge1xuICAgICAgICB2YXIgc3BhblN0YXJ0ID0gc3BhbnNbc3BhbkluZGV4XTtcbiAgICAgICAgdmFyIHNwYW5FbmQgPSBzcGFuc1tzcGFuSW5kZXggKyAyXSB8fCBzb3VyY2VMZW5ndGg7XG4gIFxuICAgICAgICB2YXIgZGVjRW5kID0gZGVjb3JhdGlvbnNbZGVjb3JhdGlvbkluZGV4ICsgMl0gfHwgc291cmNlTGVuZ3RoO1xuICBcbiAgICAgICAgdmFyIGVuZCA9IE1hdGgubWluKHNwYW5FbmQsIGRlY0VuZCk7XG4gIFxuICAgICAgICB2YXIgdGV4dE5vZGUgPSBzcGFuc1tzcGFuSW5kZXggKyAxXTtcbiAgICAgICAgdmFyIHN0eWxlZFRleHQ7XG4gICAgICAgIGlmICh0ZXh0Tm9kZS5ub2RlVHlwZSAhPT0gMSAgLy8gRG9uJ3QgbXVjayB3aXRoIDxCUj5zIG9yIDxMST5zXG4gICAgICAgICAgICAvLyBEb24ndCBpbnRyb2R1Y2Ugc3BhbnMgYXJvdW5kIGVtcHR5IHRleHQgbm9kZXMuXG4gICAgICAgICAgICAmJiAoc3R5bGVkVGV4dCA9IHNvdXJjZS5zdWJzdHJpbmcoc291cmNlSW5kZXgsIGVuZCkpKSB7XG4gICAgICAgICAgLy8gVGhpcyBtYXkgc2VlbSBiaXphcnJlLCBhbmQgaXQgaXMuICBFbWl0dGluZyBMRiBvbiBJRSBjYXVzZXMgdGhlXG4gICAgICAgICAgLy8gY29kZSB0byBkaXNwbGF5IHdpdGggc3BhY2VzIGluc3RlYWQgb2YgbGluZSBicmVha3MuXG4gICAgICAgICAgLy8gRW1pdHRpbmcgV2luZG93cyBzdGFuZGFyZCBpc3N1ZSBsaW5lYnJlYWtzIChDUkxGKSBjYXVzZXMgYSBibGFua1xuICAgICAgICAgIC8vIHNwYWNlIHRvIGFwcGVhciBhdCB0aGUgYmVnaW5uaW5nIG9mIGV2ZXJ5IGxpbmUgYnV0IHRoZSBmaXJzdC5cbiAgICAgICAgICAvLyBFbWl0dGluZyBhbiBvbGQgTWFjIE9TIDkgbGluZSBzZXBhcmF0b3IgbWFrZXMgZXZlcnl0aGluZyBzcGlmZnkuXG4gICAgICAgICAgaWYgKGlzSUU4T3JFYXJsaWVyKSB7XG4gICAgICAgICAgICBzdHlsZWRUZXh0ID0gc3R5bGVkVGV4dC5yZXBsYWNlKG5ld2xpbmVSZSwgJ1xccicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0ZXh0Tm9kZS5ub2RlVmFsdWUgPSBzdHlsZWRUZXh0O1xuICAgICAgICAgIHZhciBkb2N1bWVudCA9IHRleHROb2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgICAgICAgdmFyIHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgc3Bhbi5jbGFzc05hbWUgPSBkZWNvcmF0aW9uc1tkZWNvcmF0aW9uSW5kZXggKyAxXTtcbiAgICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IHRleHROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgcGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoc3BhbiwgdGV4dE5vZGUpO1xuICAgICAgICAgIHNwYW4uYXBwZW5kQ2hpbGQodGV4dE5vZGUpO1xuICAgICAgICAgIGlmIChzb3VyY2VJbmRleCA8IHNwYW5FbmQpIHsgIC8vIFNwbGl0IG9mZiBhIHRleHQgbm9kZS5cbiAgICAgICAgICAgIHNwYW5zW3NwYW5JbmRleCArIDFdID0gdGV4dE5vZGVcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBQb3NzaWJseSBvcHRpbWl6ZSBieSB1c2luZyAnJyBpZiB0aGVyZSdzIG5vIGZsaWNrZXIuXG4gICAgICAgICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzb3VyY2Uuc3Vic3RyaW5nKGVuZCwgc3BhbkVuZCkpO1xuICAgICAgICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGV4dE5vZGUsIHNwYW4ubmV4dFNpYmxpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICBcbiAgICAgICAgc291cmNlSW5kZXggPSBlbmQ7XG4gIFxuICAgICAgICBpZiAoc291cmNlSW5kZXggPj0gc3BhbkVuZCkge1xuICAgICAgICAgIHNwYW5JbmRleCArPSAyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3VyY2VJbmRleCA+PSBkZWNFbmQpIHtcbiAgICAgICAgICBkZWNvcmF0aW9uSW5kZXggKz0gMjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoc291cmNlTm9kZSkge1xuICAgICAgICBzb3VyY2VOb2RlLnN0eWxlLmRpc3BsYXkgPSBvbGREaXNwbGF5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKiBNYXBzIGxhbmd1YWdlLXNwZWNpZmljIGZpbGUgZXh0ZW5zaW9ucyB0byBoYW5kbGVycy4gKi9cbiAgdmFyIGxhbmdIYW5kbGVyUmVnaXN0cnkgPSB7fTtcbiAgLyoqIFJlZ2lzdGVyIGEgbGFuZ3VhZ2UgaGFuZGxlciBmb3IgdGhlIGdpdmVuIGZpbGUgZXh0ZW5zaW9ucy5cbiAgICAqIEBwYXJhbSB7ZnVuY3Rpb24gKE9iamVjdCl9IGhhbmRsZXIgYSBmdW5jdGlvbiBmcm9tIHNvdXJjZSBjb2RlIHRvIGEgbGlzdFxuICAgICogICAgICBvZiBkZWNvcmF0aW9ucy4gIFRha2VzIGEgc2luZ2xlIGFyZ3VtZW50IGpvYiB3aGljaCBkZXNjcmliZXMgdGhlXG4gICAgKiAgICAgIHN0YXRlIG9mIHRoZSBjb21wdXRhdGlvbi4gICBUaGUgc2luZ2xlIHBhcmFtZXRlciBoYXMgdGhlIGZvcm1cbiAgICAqICAgICAge0Bjb2RlIHtcbiAgICAqICAgICAgICBzb3VyY2VDb2RlOiB7c3RyaW5nfSBhcyBwbGFpbiB0ZXh0LlxuICAgICogICAgICAgIGRlY29yYXRpb25zOiB7QXJyYXkuPG51bWJlcnxzdHJpbmc+fSBhbiBhcnJheSBvZiBzdHlsZSBjbGFzc2VzXG4gICAgKiAgICAgICAgICAgICAgICAgICAgIHByZWNlZGVkIGJ5IHRoZSBwb3NpdGlvbiBhdCB3aGljaCB0aGV5IHN0YXJ0IGluXG4gICAgKiAgICAgICAgICAgICAgICAgICAgIGpvYi5zb3VyY2VDb2RlIGluIG9yZGVyLlxuICAgICogICAgICAgICAgICAgICAgICAgICBUaGUgbGFuZ3VhZ2UgaGFuZGxlciBzaG91bGQgYXNzaWduZWQgdGhpcyBmaWVsZC5cbiAgICAqICAgICAgICBiYXNlUG9zOiB7aW50fSB0aGUgcG9zaXRpb24gb2Ygc291cmNlIGluIHRoZSBsYXJnZXIgc291cmNlIGNodW5rLlxuICAgICogICAgICAgICAgICAgICAgIEFsbCBwb3NpdGlvbnMgaW4gdGhlIG91dHB1dCBkZWNvcmF0aW9ucyBhcnJheSBhcmUgcmVsYXRpdmVcbiAgICAqICAgICAgICAgICAgICAgICB0byB0aGUgbGFyZ2VyIHNvdXJjZSBjaHVuay5cbiAgICAqICAgICAgfSB9XG4gICAgKiBAcGFyYW0ge0FycmF5LjxzdHJpbmc+fSBmaWxlRXh0ZW5zaW9uc1xuICAgICovXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyTGFuZ0hhbmRsZXIoaGFuZGxlciwgZmlsZUV4dGVuc2lvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gZmlsZUV4dGVuc2lvbnMubGVuZ3RoOyAtLWkgPj0gMDspIHtcbiAgICAgIHZhciBleHQgPSBmaWxlRXh0ZW5zaW9uc1tpXTtcbiAgICAgIGlmICghbGFuZ0hhbmRsZXJSZWdpc3RyeS5oYXNPd25Qcm9wZXJ0eShleHQpKSB7XG4gICAgICAgIGxhbmdIYW5kbGVyUmVnaXN0cnlbZXh0XSA9IGhhbmRsZXI7XG4gICAgICB9IGVsc2UgaWYgKHdpblsnY29uc29sZSddKSB7XG4gICAgICAgIGNvbnNvbGVbJ3dhcm4nXSgnY2Fubm90IG92ZXJyaWRlIGxhbmd1YWdlIGhhbmRsZXIgJXMnLCBleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBsYW5nSGFuZGxlckZvckV4dGVuc2lvbihleHRlbnNpb24sIHNvdXJjZSkge1xuICAgIGlmICghKGV4dGVuc2lvbiAmJiBsYW5nSGFuZGxlclJlZ2lzdHJ5Lmhhc093blByb3BlcnR5KGV4dGVuc2lvbikpKSB7XG4gICAgICAvLyBUcmVhdCBpdCBhcyBtYXJrdXAgaWYgdGhlIGZpcnN0IG5vbiB3aGl0ZXNwYWNlIGNoYXJhY3RlciBpcyBhIDwgYW5kXG4gICAgICAvLyB0aGUgbGFzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIgaXMgYSA+LlxuICAgICAgZXh0ZW5zaW9uID0gL15cXHMqPC8udGVzdChzb3VyY2UpXG4gICAgICAgICAgPyAnZGVmYXVsdC1tYXJrdXAnXG4gICAgICAgICAgOiAnZGVmYXVsdC1jb2RlJztcbiAgICB9XG4gICAgcmV0dXJuIGxhbmdIYW5kbGVyUmVnaXN0cnlbZXh0ZW5zaW9uXTtcbiAgfVxuICByZWdpc3RlckxhbmdIYW5kbGVyKGRlY29yYXRlU291cmNlLCBbJ2RlZmF1bHQtY29kZSddKTtcbiAgcmVnaXN0ZXJMYW5nSGFuZGxlcihcbiAgICAgIGNyZWF0ZVNpbXBsZUxleGVyKFxuICAgICAgICAgIFtdLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgW1BSX1BMQUlOLCAgICAgICAvXltePD9dKy9dLFxuICAgICAgICAgICBbUFJfREVDTEFSQVRJT04sIC9ePCFcXHdbXj5dKig/Oj58JCkvXSxcbiAgICAgICAgICAgW1BSX0NPTU1FTlQsICAgICAvXjxcXCEtLVtcXHNcXFNdKj8oPzotXFwtPnwkKS9dLFxuICAgICAgICAgICAvLyBVbmVzY2FwZWQgY29udGVudCBpbiBhbiB1bmtub3duIGxhbmd1YWdlXG4gICAgICAgICAgIFsnbGFuZy0nLCAgICAgICAgL148XFw/KFtcXHNcXFNdKz8pKD86XFw/PnwkKS9dLFxuICAgICAgICAgICBbJ2xhbmctJywgICAgICAgIC9ePCUoW1xcc1xcU10rPykoPzolPnwkKS9dLFxuICAgICAgICAgICBbUFJfUFVOQ1RVQVRJT04sIC9eKD86PFslP118WyU/XT4pL10sXG4gICAgICAgICAgIFsnbGFuZy0nLCAgICAgICAgL148eG1wXFxiW14+XSo+KFtcXHNcXFNdKz8pPFxcL3htcFxcYltePl0qPi9pXSxcbiAgICAgICAgICAgLy8gVW5lc2NhcGVkIGNvbnRlbnQgaW4gamF2YXNjcmlwdC4gIChPciBwb3NzaWJseSB2YnNjcmlwdCkuXG4gICAgICAgICAgIFsnbGFuZy1qcycsICAgICAgL148c2NyaXB0XFxiW14+XSo+KFtcXHNcXFNdKj8pKDxcXC9zY3JpcHRcXGJbXj5dKj4pL2ldLFxuICAgICAgICAgICAvLyBDb250YWlucyB1bmVzY2FwZWQgc3R5bGVzaGVldCBjb250ZW50XG4gICAgICAgICAgIFsnbGFuZy1jc3MnLCAgICAgL148c3R5bGVcXGJbXj5dKj4oW1xcc1xcU10qPykoPFxcL3N0eWxlXFxiW14+XSo+KS9pXSxcbiAgICAgICAgICAgWydsYW5nLWluLnRhZycsICAvXig8XFwvP1thLXpdW148Pl0qPikvaV1cbiAgICAgICAgICBdKSxcbiAgICAgIFsnZGVmYXVsdC1tYXJrdXAnLCAnaHRtJywgJ2h0bWwnLCAnbXhtbCcsICd4aHRtbCcsICd4bWwnLCAneHNsJ10pO1xuICByZWdpc3RlckxhbmdIYW5kbGVyKFxuICAgICAgY3JlYXRlU2ltcGxlTGV4ZXIoXG4gICAgICAgICAgW1xuICAgICAgICAgICBbUFJfUExBSU4sICAgICAgICAvXltcXHNdKy8sIG51bGwsICcgXFx0XFxyXFxuJ10sXG4gICAgICAgICAgIFtQUl9BVFRSSUJfVkFMVUUsIC9eKD86XFxcIlteXFxcIl0qXFxcIj98XFwnW15cXCddKlxcJz8pLywgbnVsbCwgJ1xcXCJcXCcnXVxuICAgICAgICAgICBdLFxuICAgICAgICAgIFtcbiAgICAgICAgICAgW1BSX1RBRywgICAgICAgICAgL15ePFxcLz9bYS16XSg/OltcXHcuOi1dKlxcdyk/fFxcLz8+JC9pXSxcbiAgICAgICAgICAgW1BSX0FUVFJJQl9OQU1FLCAgL14oPyFzdHlsZVtcXHM9XXxvbilbYS16XSg/OltcXHc6LV0qXFx3KT8vaV0sXG4gICAgICAgICAgIFsnbGFuZy11cS52YWwnLCAgIC9ePVxccyooW14+XFwnXFxcIlxcc10qKD86W14+XFwnXFxcIlxcc1xcL118XFwvKD89XFxzKSkpL10sXG4gICAgICAgICAgIFtQUl9QVU5DVFVBVElPTiwgIC9eWz08PlxcL10rL10sXG4gICAgICAgICAgIFsnbGFuZy1qcycsICAgICAgIC9eb25cXHcrXFxzKj1cXHMqXFxcIihbXlxcXCJdKylcXFwiL2ldLFxuICAgICAgICAgICBbJ2xhbmctanMnLCAgICAgICAvXm9uXFx3K1xccyo9XFxzKlxcJyhbXlxcJ10rKVxcJy9pXSxcbiAgICAgICAgICAgWydsYW5nLWpzJywgICAgICAgL15vblxcdytcXHMqPVxccyooW15cXFwiXFwnPlxcc10rKS9pXSxcbiAgICAgICAgICAgWydsYW5nLWNzcycsICAgICAgL15zdHlsZVxccyo9XFxzKlxcXCIoW15cXFwiXSspXFxcIi9pXSxcbiAgICAgICAgICAgWydsYW5nLWNzcycsICAgICAgL15zdHlsZVxccyo9XFxzKlxcJyhbXlxcJ10rKVxcJy9pXSxcbiAgICAgICAgICAgWydsYW5nLWNzcycsICAgICAgL15zdHlsZVxccyo9XFxzKihbXlxcXCJcXCc+XFxzXSspL2ldXG4gICAgICAgICAgIF0pLFxuICAgICAgWydpbi50YWcnXSk7XG4gIHJlZ2lzdGVyTGFuZ0hhbmRsZXIoXG4gICAgICBjcmVhdGVTaW1wbGVMZXhlcihbXSwgW1tQUl9BVFRSSUJfVkFMVUUsIC9eW1xcc1xcU10rL11dKSwgWyd1cS52YWwnXSk7XG4gIHJlZ2lzdGVyTGFuZ0hhbmRsZXIoc291cmNlRGVjb3JhdG9yKHtcbiAgICAgICAgICAna2V5d29yZHMnOiBDUFBfS0VZV09SRFMsXG4gICAgICAgICAgJ2hhc2hDb21tZW50cyc6IHRydWUsXG4gICAgICAgICAgJ2NTdHlsZUNvbW1lbnRzJzogdHJ1ZSxcbiAgICAgICAgICAndHlwZXMnOiBDX1RZUEVTXG4gICAgICAgIH0pLCBbJ2MnLCAnY2MnLCAnY3BwJywgJ2N4eCcsICdjeWMnLCAnbSddKTtcbiAgcmVnaXN0ZXJMYW5nSGFuZGxlcihzb3VyY2VEZWNvcmF0b3Ioe1xuICAgICAgICAgICdrZXl3b3Jkcyc6ICdudWxsLHRydWUsZmFsc2UnXG4gICAgICAgIH0pLCBbJ2pzb24nXSk7XG4gIHJlZ2lzdGVyTGFuZ0hhbmRsZXIoc291cmNlRGVjb3JhdG9yKHtcbiAgICAgICAgICAna2V5d29yZHMnOiBDU0hBUlBfS0VZV09SRFMsXG4gICAgICAgICAgJ2hhc2hDb21tZW50cyc6IHRydWUsXG4gICAgICAgICAgJ2NTdHlsZUNvbW1lbnRzJzogdHJ1ZSxcbiAgICAgICAgICAndmVyYmF0aW1TdHJpbmdzJzogdHJ1ZSxcbiAgICAgICAgICAndHlwZXMnOiBDX1RZUEVTXG4gICAgICAgIH0pLCBbJ2NzJ10pO1xuICByZWdpc3RlckxhbmdIYW5kbGVyKHNvdXJjZURlY29yYXRvcih7XG4gICAgICAgICAgJ2tleXdvcmRzJzogSkFWQV9LRVlXT1JEUyxcbiAgICAgICAgICAnY1N0eWxlQ29tbWVudHMnOiB0cnVlXG4gICAgICAgIH0pLCBbJ2phdmEnXSk7XG4gIHJlZ2lzdGVyTGFuZ0hhbmRsZXIoc291cmNlRGVjb3JhdG9yKHtcbiAgICAgICAgICAna2V5d29yZHMnOiBTSF9LRVlXT1JEUyxcbiAgICAgICAgICAnaGFzaENvbW1lbnRzJzogdHJ1ZSxcbiAgICAgICAgICAnbXVsdGlMaW5lU3RyaW5ncyc6IHRydWVcbiAgICAgICAgfSksIFsnYmFzaCcsICdic2gnLCAnY3NoJywgJ3NoJ10pO1xuICByZWdpc3RlckxhbmdIYW5kbGVyKHNvdXJjZURlY29yYXRvcih7XG4gICAgICAgICAgJ2tleXdvcmRzJzogUFlUSE9OX0tFWVdPUkRTLFxuICAgICAgICAgICdoYXNoQ29tbWVudHMnOiB0cnVlLFxuICAgICAgICAgICdtdWx0aUxpbmVTdHJpbmdzJzogdHJ1ZSxcbiAgICAgICAgICAndHJpcGxlUXVvdGVkU3RyaW5ncyc6IHRydWVcbiAgICAgICAgfSksIFsnY3YnLCAncHknLCAncHl0aG9uJ10pO1xuICByZWdpc3RlckxhbmdIYW5kbGVyKHNvdXJjZURlY29yYXRvcih7XG4gICAgICAgICAgJ2tleXdvcmRzJzogUEVSTF9LRVlXT1JEUyxcbiAgICAgICAgICAnaGFzaENvbW1lbnRzJzogdHJ1ZSxcbiAgICAgICAgICAnbXVsdGlMaW5lU3RyaW5ncyc6IHRydWUsXG4gICAgICAgICAgJ3JlZ2V4TGl0ZXJhbHMnOiAyICAvLyBtdWx0aWxpbmUgcmVnZXggbGl0ZXJhbHNcbiAgICAgICAgfSksIFsncGVybCcsICdwbCcsICdwbSddKTtcbiAgcmVnaXN0ZXJMYW5nSGFuZGxlcihzb3VyY2VEZWNvcmF0b3Ioe1xuICAgICAgICAgICdrZXl3b3Jkcyc6IFJVQllfS0VZV09SRFMsXG4gICAgICAgICAgJ2hhc2hDb21tZW50cyc6IHRydWUsXG4gICAgICAgICAgJ211bHRpTGluZVN0cmluZ3MnOiB0cnVlLFxuICAgICAgICAgICdyZWdleExpdGVyYWxzJzogdHJ1ZVxuICAgICAgICB9KSwgWydyYicsICdydWJ5J10pO1xuICByZWdpc3RlckxhbmdIYW5kbGVyKHNvdXJjZURlY29yYXRvcih7XG4gICAgICAgICAgJ2tleXdvcmRzJzogSlNDUklQVF9LRVlXT1JEUyxcbiAgICAgICAgICAnY1N0eWxlQ29tbWVudHMnOiB0cnVlLFxuICAgICAgICAgICdyZWdleExpdGVyYWxzJzogdHJ1ZVxuICAgICAgICB9KSwgWydqYXZhc2NyaXB0JywgJ2pzJ10pO1xuICByZWdpc3RlckxhbmdIYW5kbGVyKHNvdXJjZURlY29yYXRvcih7XG4gICAgICAgICAgJ2tleXdvcmRzJzogQ09GRkVFX0tFWVdPUkRTLFxuICAgICAgICAgICdoYXNoQ29tbWVudHMnOiAzLCAgLy8gIyMjIHN0eWxlIGJsb2NrIGNvbW1lbnRzXG4gICAgICAgICAgJ2NTdHlsZUNvbW1lbnRzJzogdHJ1ZSxcbiAgICAgICAgICAnbXVsdGlsaW5lU3RyaW5ncyc6IHRydWUsXG4gICAgICAgICAgJ3RyaXBsZVF1b3RlZFN0cmluZ3MnOiB0cnVlLFxuICAgICAgICAgICdyZWdleExpdGVyYWxzJzogdHJ1ZVxuICAgICAgICB9KSwgWydjb2ZmZWUnXSk7XG4gIHJlZ2lzdGVyTGFuZ0hhbmRsZXIoc291cmNlRGVjb3JhdG9yKHtcbiAgICAgICAgICAna2V5d29yZHMnOiBSVVNUX0tFWVdPUkRTLFxuICAgICAgICAgICdjU3R5bGVDb21tZW50cyc6IHRydWUsXG4gICAgICAgICAgJ211bHRpbGluZVN0cmluZ3MnOiB0cnVlXG4gICAgICAgIH0pLCBbJ3JjJywgJ3JzJywgJ3J1c3QnXSk7XG4gIHJlZ2lzdGVyTGFuZ0hhbmRsZXIoXG4gICAgICBjcmVhdGVTaW1wbGVMZXhlcihbXSwgW1tQUl9TVFJJTkcsIC9eW1xcc1xcU10rL11dKSwgWydyZWdleCddKTtcblxuICBmdW5jdGlvbiBhcHBseURlY29yYXRvcihqb2IpIHtcbiAgICB2YXIgb3B0X2xhbmdFeHRlbnNpb24gPSBqb2IubGFuZ0V4dGVuc2lvbjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBFeHRyYWN0IHRhZ3MsIGFuZCBjb252ZXJ0IHRoZSBzb3VyY2UgY29kZSB0byBwbGFpbiB0ZXh0LlxuICAgICAgdmFyIHNvdXJjZUFuZFNwYW5zID0gZXh0cmFjdFNvdXJjZVNwYW5zKGpvYi5zb3VyY2VOb2RlLCBqb2IucHJlKTtcbiAgICAgIC8qKiBQbGFpbiB0ZXh0LiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZUFuZFNwYW5zLnNvdXJjZUNvZGU7XG4gICAgICBqb2Iuc291cmNlQ29kZSA9IHNvdXJjZTtcbiAgICAgIGpvYi5zcGFucyA9IHNvdXJjZUFuZFNwYW5zLnNwYW5zO1xuICAgICAgam9iLmJhc2VQb3MgPSAwO1xuXG4gICAgICAvLyBBcHBseSB0aGUgYXBwcm9wcmlhdGUgbGFuZ3VhZ2UgaGFuZGxlclxuICAgICAgbGFuZ0hhbmRsZXJGb3JFeHRlbnNpb24ob3B0X2xhbmdFeHRlbnNpb24sIHNvdXJjZSkoam9iKTtcblxuICAgICAgLy8gSW50ZWdyYXRlIHRoZSBkZWNvcmF0aW9ucyBhbmQgdGFncyBiYWNrIGludG8gdGhlIHNvdXJjZSBjb2RlLFxuICAgICAgLy8gbW9kaWZ5aW5nIHRoZSBzb3VyY2VOb2RlIGluIHBsYWNlLlxuICAgICAgcmVjb21iaW5lVGFnc0FuZERlY29yYXRpb25zKGpvYik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHdpblsnY29uc29sZSddKSB7XG4gICAgICAgIGNvbnNvbGVbJ2xvZyddKGUgJiYgZVsnc3RhY2snXSB8fCBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJldHR5IHByaW50IGEgY2h1bmsgb2YgY29kZS5cbiAgICogQHBhcmFtIHNvdXJjZUNvZGVIdG1sIHtzdHJpbmd9IFRoZSBIVE1MIHRvIHByZXR0eSBwcmludC5cbiAgICogQHBhcmFtIG9wdF9sYW5nRXh0ZW5zaW9uIHtzdHJpbmd9IFRoZSBsYW5ndWFnZSBuYW1lIHRvIHVzZS5cbiAgICogICAgIFR5cGljYWxseSwgYSBmaWxlbmFtZSBleHRlbnNpb24gbGlrZSAnY3BwJyBvciAnamF2YScuXG4gICAqIEBwYXJhbSBvcHRfbnVtYmVyTGluZXMge251bWJlcnxib29sZWFufSBUcnVlIHRvIG51bWJlciBsaW5lcyxcbiAgICogICAgIG9yIHRoZSAxLWluZGV4ZWQgbnVtYmVyIG9mIHRoZSBmaXJzdCBsaW5lIGluIHNvdXJjZUNvZGVIdG1sLlxuICAgKi9cbiAgZnVuY3Rpb24gJHByZXR0eVByaW50T25lKHNvdXJjZUNvZGVIdG1sLCBvcHRfbGFuZ0V4dGVuc2lvbiwgb3B0X251bWJlckxpbmVzKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIC8vIFRoaXMgY291bGQgY2F1c2UgaW1hZ2VzIHRvIGxvYWQgYW5kIG9ubG9hZCBsaXN0ZW5lcnMgdG8gZmlyZS5cbiAgICAvLyBFLmcuIDxpbWcgb25lcnJvcj1cImFsZXJ0KDEzMzcpXCIgc3JjPVwibm9zdWNoaW1hZ2UucG5nXCI+LlxuICAgIC8vIFdlIGFzc3VtZSB0aGF0IHRoZSBpbm5lciBIVE1MIGlzIGZyb20gYSB0cnVzdGVkIHNvdXJjZS5cbiAgICAvLyBUaGUgcHJlLXRhZyBpcyByZXF1aXJlZCBmb3IgSUU4IHdoaWNoIHN0cmlwcyBuZXdsaW5lcyBmcm9tIGlubmVySFRNTFxuICAgIC8vIHdoZW4gaXQgaXMgaW5qZWN0ZWQgaW50byBhIDxwcmU+IHRhZy5cbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ1MTQ4Ni9wcmUtdGFnLWxvc2VzLWxpbmUtYnJlYWtzLXdoZW4tc2V0dGluZy1pbm5lcmh0bWwtaW4taWVcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE5NTM2My9pbnNlcnRpbmctYS1uZXdsaW5lLWludG8tYS1wcmUtdGFnLWllLWphdmFzY3JpcHRcbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gJzxwcmU+JyArIHNvdXJjZUNvZGVIdG1sICsgJzwvcHJlPic7XG4gICAgY29udGFpbmVyID0gY29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgaWYgKG9wdF9udW1iZXJMaW5lcykge1xuICAgICAgbnVtYmVyTGluZXMoY29udGFpbmVyLCBvcHRfbnVtYmVyTGluZXMsIHRydWUpO1xuICAgIH1cblxuICAgIHZhciBqb2IgPSB7XG4gICAgICBsYW5nRXh0ZW5zaW9uOiBvcHRfbGFuZ0V4dGVuc2lvbixcbiAgICAgIG51bWJlckxpbmVzOiBvcHRfbnVtYmVyTGluZXMsXG4gICAgICBzb3VyY2VOb2RlOiBjb250YWluZXIsXG4gICAgICBwcmU6IDFcbiAgICB9O1xuICAgIGFwcGx5RGVjb3JhdG9yKGpvYik7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUw7XG4gIH1cblxuICAgLyoqXG4gICAgKiBGaW5kIGFsbCB0aGUge0Bjb2RlIDxwcmU+fSBhbmQge0Bjb2RlIDxjb2RlPn0gdGFncyBpbiB0aGUgRE9NIHdpdGhcbiAgICAqIHtAY29kZSBjbGFzcz1wcmV0dHlwcmludH0gYW5kIHByZXR0aWZ5IHRoZW0uXG4gICAgKlxuICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0X3doZW5Eb25lIGNhbGxlZCB3aGVuIHByZXR0aWZ5aW5nIGlzIGRvbmUuXG4gICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fEhUTUxEb2N1bWVudH0gb3B0X3Jvb3QgYW4gZWxlbWVudCBvciBkb2N1bWVudFxuICAgICogICBjb250YWluaW5nIGFsbCB0aGUgZWxlbWVudHMgdG8gcHJldHR5IHByaW50LlxuICAgICogICBEZWZhdWx0cyB0byB7QGNvZGUgZG9jdW1lbnQuYm9keX0uXG4gICAgKi9cbiAgZnVuY3Rpb24gJHByZXR0eVByaW50KG9wdF93aGVuRG9uZSwgb3B0X3Jvb3QpIHtcbiAgICB2YXIgcm9vdCA9IG9wdF9yb290IHx8IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIGRvYyA9IHJvb3Qub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbiAgICBmdW5jdGlvbiBieVRhZ05hbWUodG4pIHsgcmV0dXJuIHJvb3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUodG4pOyB9XG4gICAgLy8gZmV0Y2ggYSBsaXN0IG9mIG5vZGVzIHRvIHJld3JpdGVcbiAgICB2YXIgY29kZVNlZ21lbnRzID0gW2J5VGFnTmFtZSgncHJlJyksIGJ5VGFnTmFtZSgnY29kZScpLCBieVRhZ05hbWUoJ3htcCcpXTtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVTZWdtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgZm9yICh2YXIgaiA9IDAsIG4gPSBjb2RlU2VnbWVudHNbaV0ubGVuZ3RoOyBqIDwgbjsgKytqKSB7XG4gICAgICAgIGVsZW1lbnRzLnB1c2goY29kZVNlZ21lbnRzW2ldW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29kZVNlZ21lbnRzID0gbnVsbDtcblxuICAgIHZhciBjbG9jayA9IERhdGU7XG4gICAgaWYgKCFjbG9ja1snbm93J10pIHtcbiAgICAgIGNsb2NrID0geyAnbm93JzogZnVuY3Rpb24gKCkgeyByZXR1cm4gKyhuZXcgRGF0ZSk7IH0gfTtcbiAgICB9XG5cbiAgICAvLyBUaGUgbG9vcCBpcyBicm9rZW4gaW50byBhIHNlcmllcyBvZiBjb250aW51YXRpb25zIHRvIG1ha2Ugc3VyZSB0aGF0IHdlXG4gICAgLy8gZG9uJ3QgbWFrZSB0aGUgYnJvd3NlciB1bnJlc3BvbnNpdmUgd2hlbiByZXdyaXRpbmcgYSBsYXJnZSBwYWdlLlxuICAgIHZhciBrID0gMDtcbiAgICB2YXIgcHJldHR5UHJpbnRpbmdKb2I7XG5cbiAgICB2YXIgbGFuZ0V4dGVuc2lvblJlID0gL1xcYmxhbmcoPzp1YWdlKT8tKFtcXHcuXSspKD8hXFxTKS87XG4gICAgdmFyIHByZXR0eVByaW50UmUgPSAvXFxicHJldHR5cHJpbnRcXGIvO1xuICAgIHZhciBwcmV0dHlQcmludGVkUmUgPSAvXFxicHJldHR5cHJpbnRlZFxcYi87XG4gICAgdmFyIHByZWZvcm1hdHRlZFRhZ05hbWVSZSA9IC9wcmV8eG1wL2k7XG4gICAgdmFyIGNvZGVSZSA9IC9eY29kZSQvaTtcbiAgICB2YXIgcHJlQ29kZVhtcFJlID0gL14oPzpwcmV8Y29kZXx4bXApJC9pO1xuICAgIHZhciBFTVBUWSA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZG9Xb3JrKCkge1xuICAgICAgdmFyIGVuZFRpbWUgPSAod2luWydQUl9TSE9VTERfVVNFX0NPTlRJTlVBVElPTiddID9cbiAgICAgICAgICAgICAgICAgICAgIGNsb2NrWydub3cnXSgpICsgMjUwIC8qIG1zICovIDpcbiAgICAgICAgICAgICAgICAgICAgIEluZmluaXR5KTtcbiAgICAgIGZvciAoOyBrIDwgZWxlbWVudHMubGVuZ3RoICYmIGNsb2NrWydub3cnXSgpIDwgZW5kVGltZTsgaysrKSB7XG4gICAgICAgIHZhciBjcyA9IGVsZW1lbnRzW2tdO1xuXG4gICAgICAgIC8vIExvb2sgZm9yIGEgcHJlY2VkaW5nIGNvbW1lbnQgbGlrZVxuICAgICAgICAvLyA8P3ByZXR0aWZ5IGxhbmc9XCIuLi5cIiBsaW5lbnVtcz1cIi4uLlwiPz5cbiAgICAgICAgdmFyIGF0dHJzID0gRU1QVFk7XG4gICAgICAgIHtcbiAgICAgICAgICBmb3IgKHZhciBwcmVjZWRlciA9IGNzOyAocHJlY2VkZXIgPSBwcmVjZWRlci5wcmV2aW91c1NpYmxpbmcpOykge1xuICAgICAgICAgICAgdmFyIG50ID0gcHJlY2VkZXIubm9kZVR5cGU7XG4gICAgICAgICAgICAvLyA8P2Zvbz8+IGlzIHBhcnNlZCBieSBIVE1MIDUgdG8gYSBjb21tZW50IG5vZGUgKDgpXG4gICAgICAgICAgICAvLyBsaWtlIDwhLS0/Zm9vPy0tPiwgYnV0IGluIFhNTCBpcyBhIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb25cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IChudCA9PT0gNyB8fCBudCA9PT0gOCkgJiYgcHJlY2VkZXIubm9kZVZhbHVlO1xuICAgICAgICAgICAgaWYgKHZhbHVlXG4gICAgICAgICAgICAgICAgPyAhL15cXD8/cHJldHRpZnlcXGIvLnRlc3QodmFsdWUpXG4gICAgICAgICAgICAgICAgOiAobnQgIT09IDMgfHwgL1xcUy8udGVzdChwcmVjZWRlci5ub2RlVmFsdWUpKSkge1xuICAgICAgICAgICAgICAvLyBTa2lwIG92ZXIgd2hpdGUtc3BhY2UgdGV4dCBub2RlcyBidXQgbm90IG90aGVycy5cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgYXR0cnMgPSB7fTtcbiAgICAgICAgICAgICAgdmFsdWUucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgIC9cXGIoXFx3Kyk9KFtcXHc6LiUrLV0rKS9nLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChfLCBuYW1lLCB2YWx1ZSkgeyBhdHRyc1tuYW1lXSA9IHZhbHVlOyB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGNzLmNsYXNzTmFtZTtcbiAgICAgICAgaWYgKChhdHRycyAhPT0gRU1QVFkgfHwgcHJldHR5UHJpbnRSZS50ZXN0KGNsYXNzTmFtZSkpXG4gICAgICAgICAgICAvLyBEb24ndCByZWRvIHRoaXMgaWYgd2UndmUgYWxyZWFkeSBkb25lIGl0LlxuICAgICAgICAgICAgLy8gVGhpcyBhbGxvd3MgcmVjYWxsaW5nIHByZXR0eSBwcmludCB0byBqdXN0IHByZXR0eXByaW50IGVsZW1lbnRzXG4gICAgICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiBhZGRlZCB0byB0aGUgcGFnZSBzaW5jZSBsYXN0IGNhbGwuXG4gICAgICAgICAgICAmJiAhcHJldHR5UHJpbnRlZFJlLnRlc3QoY2xhc3NOYW1lKSkge1xuXG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoaXMgaXMgbm90IG5lc3RlZCBpbiBhbiBhbHJlYWR5IHByZXR0aWZpZWQgZWxlbWVudFxuICAgICAgICAgIHZhciBuZXN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICBmb3IgKHZhciBwID0gY3MucGFyZW50Tm9kZTsgcDsgcCA9IHAucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdmFyIHRuID0gcC50YWdOYW1lO1xuICAgICAgICAgICAgaWYgKHByZUNvZGVYbXBSZS50ZXN0KHRuKVxuICAgICAgICAgICAgICAgICYmIHAuY2xhc3NOYW1lICYmIHByZXR0eVByaW50UmUudGVzdChwLmNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgbmVzdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghbmVzdGVkKSB7XG4gICAgICAgICAgICAvLyBNYXJrIGRvbmUuICBJZiB3ZSBmYWlsIHRvIHByZXR0eXByaW50IGZvciB3aGF0ZXZlciByZWFzb24sXG4gICAgICAgICAgICAvLyB3ZSBzaG91bGRuJ3QgdHJ5IGFnYWluLlxuICAgICAgICAgICAgY3MuY2xhc3NOYW1lICs9ICcgcHJldHR5cHJpbnRlZCc7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBjbGFzc2VzIGluY2x1ZGVzIGEgbGFuZ3VhZ2UgZXh0ZW5zaW9ucywgdXNlIGl0LlxuICAgICAgICAgICAgLy8gTGFuZ3VhZ2UgZXh0ZW5zaW9ucyBjYW4gYmUgc3BlY2lmaWVkIGxpa2VcbiAgICAgICAgICAgIC8vICAgICA8cHJlIGNsYXNzPVwicHJldHR5cHJpbnQgbGFuZy1jcHBcIj5cbiAgICAgICAgICAgIC8vIHRoZSBsYW5ndWFnZSBleHRlbnNpb24gXCJjcHBcIiBpcyB1c2VkIHRvIGZpbmQgYSBsYW5ndWFnZSBoYW5kbGVyXG4gICAgICAgICAgICAvLyBhcyBwYXNzZWQgdG8gUFIucmVnaXN0ZXJMYW5nSGFuZGxlci5cbiAgICAgICAgICAgIC8vIEhUTUw1IHJlY29tbWVuZHMgdGhhdCBhIGxhbmd1YWdlIGJlIHNwZWNpZmllZCB1c2luZyBcImxhbmd1YWdlLVwiXG4gICAgICAgICAgICAvLyBhcyB0aGUgcHJlZml4IGluc3RlYWQuICBHb29nbGUgQ29kZSBQcmV0dGlmeSBzdXBwb3J0cyBib3RoLlxuICAgICAgICAgICAgLy8gaHR0cDovL2Rldi53My5vcmcvaHRtbDUvc3BlYy1hdXRob3Itdmlldy90aGUtY29kZS1lbGVtZW50Lmh0bWxcbiAgICAgICAgICAgIHZhciBsYW5nRXh0ZW5zaW9uID0gYXR0cnNbJ2xhbmcnXTtcbiAgICAgICAgICAgIGlmICghbGFuZ0V4dGVuc2lvbikge1xuICAgICAgICAgICAgICBsYW5nRXh0ZW5zaW9uID0gY2xhc3NOYW1lLm1hdGNoKGxhbmdFeHRlbnNpb25SZSk7XG4gICAgICAgICAgICAgIC8vIFN1cHBvcnQgPHByZSBjbGFzcz1cInByZXR0eXByaW50XCI+PGNvZGUgY2xhc3M9XCJsYW5ndWFnZS1jXCI+XG4gICAgICAgICAgICAgIHZhciB3cmFwcGVyO1xuICAgICAgICAgICAgICBpZiAoIWxhbmdFeHRlbnNpb24gJiYgKHdyYXBwZXIgPSBjaGlsZENvbnRlbnRXcmFwcGVyKGNzKSlcbiAgICAgICAgICAgICAgICAgICYmIGNvZGVSZS50ZXN0KHdyYXBwZXIudGFnTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBsYW5nRXh0ZW5zaW9uID0gd3JhcHBlci5jbGFzc05hbWUubWF0Y2gobGFuZ0V4dGVuc2lvblJlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChsYW5nRXh0ZW5zaW9uKSB7IGxhbmdFeHRlbnNpb24gPSBsYW5nRXh0ZW5zaW9uWzFdOyB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwcmVmb3JtYXR0ZWQ7XG4gICAgICAgICAgICBpZiAocHJlZm9ybWF0dGVkVGFnTmFtZVJlLnRlc3QoY3MudGFnTmFtZSkpIHtcbiAgICAgICAgICAgICAgcHJlZm9ybWF0dGVkID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBjdXJyZW50U3R5bGUgPSBjc1snY3VycmVudFN0eWxlJ107XG4gICAgICAgICAgICAgIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldztcbiAgICAgICAgICAgICAgdmFyIHdoaXRlc3BhY2UgPSAoXG4gICAgICAgICAgICAgICAgICBjdXJyZW50U3R5bGVcbiAgICAgICAgICAgICAgICAgID8gY3VycmVudFN0eWxlWyd3aGl0ZVNwYWNlJ11cbiAgICAgICAgICAgICAgICAgIDogKGRlZmF1bHRWaWV3XG4gICAgICAgICAgICAgICAgICAgICAmJiBkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKVxuICAgICAgICAgICAgICAgICAgPyBkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGNzLCBudWxsKVxuICAgICAgICAgICAgICAgICAgLmdldFByb3BlcnR5VmFsdWUoJ3doaXRlLXNwYWNlJylcbiAgICAgICAgICAgICAgICAgIDogMCk7XG4gICAgICAgICAgICAgIHByZWZvcm1hdHRlZCA9IHdoaXRlc3BhY2VcbiAgICAgICAgICAgICAgICAgICYmICdwcmUnID09PSB3aGl0ZXNwYWNlLnN1YnN0cmluZygwLCAzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9vayBmb3IgYSBjbGFzcyBsaWtlIGxpbmVudW1zIG9yIGxpbmVudW1zOjxuPiB3aGVyZSA8bj4gaXMgdGhlXG4gICAgICAgICAgICAvLyAxLWluZGV4ZWQgbnVtYmVyIG9mIHRoZSBmaXJzdCBsaW5lLlxuICAgICAgICAgICAgdmFyIGxpbmVOdW1zID0gYXR0cnNbJ2xpbmVudW1zJ107XG4gICAgICAgICAgICBpZiAoIShsaW5lTnVtcyA9IGxpbmVOdW1zID09PSAndHJ1ZScgfHwgK2xpbmVOdW1zKSkge1xuICAgICAgICAgICAgICBsaW5lTnVtcyA9IGNsYXNzTmFtZS5tYXRjaCgvXFxibGluZW51bXNcXGIoPzo6KFxcZCspKT8vKTtcbiAgICAgICAgICAgICAgbGluZU51bXMgPVxuICAgICAgICAgICAgICAgIGxpbmVOdW1zXG4gICAgICAgICAgICAgICAgPyBsaW5lTnVtc1sxXSAmJiBsaW5lTnVtc1sxXS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgID8gK2xpbmVOdW1zWzFdIDogdHJ1ZVxuICAgICAgICAgICAgICAgIDogZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGluZU51bXMpIHsgbnVtYmVyTGluZXMoY3MsIGxpbmVOdW1zLCBwcmVmb3JtYXR0ZWQpOyB9XG5cbiAgICAgICAgICAgIC8vIGRvIHRoZSBwcmV0dHkgcHJpbnRpbmdcbiAgICAgICAgICAgIHByZXR0eVByaW50aW5nSm9iID0ge1xuICAgICAgICAgICAgICBsYW5nRXh0ZW5zaW9uOiBsYW5nRXh0ZW5zaW9uLFxuICAgICAgICAgICAgICBzb3VyY2VOb2RlOiBjcyxcbiAgICAgICAgICAgICAgbnVtYmVyTGluZXM6IGxpbmVOdW1zLFxuICAgICAgICAgICAgICBwcmU6IHByZWZvcm1hdHRlZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFwcGx5RGVjb3JhdG9yKHByZXR0eVByaW50aW5nSm9iKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChrIDwgZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIC8vIGZpbmlzaCB1cCBpbiBhIGNvbnRpbnVhdGlvblxuICAgICAgICBzZXRUaW1lb3V0KGRvV29yaywgMjUwKTtcbiAgICAgIH0gZWxzZSBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIG9wdF93aGVuRG9uZSkge1xuICAgICAgICBvcHRfd2hlbkRvbmUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkb1dvcmsoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb250YWlucyBmdW5jdGlvbnMgZm9yIGNyZWF0aW5nIGFuZCByZWdpc3RlcmluZyBuZXcgbGFuZ3VhZ2UgaGFuZGxlcnMuXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqL1xuICB2YXIgUFIgPSB3aW5bJ1BSJ10gPSB7XG4gICAgICAgICdjcmVhdGVTaW1wbGVMZXhlcic6IGNyZWF0ZVNpbXBsZUxleGVyLFxuICAgICAgICAncmVnaXN0ZXJMYW5nSGFuZGxlcic6IHJlZ2lzdGVyTGFuZ0hhbmRsZXIsXG4gICAgICAgICdzb3VyY2VEZWNvcmF0b3InOiBzb3VyY2VEZWNvcmF0b3IsXG4gICAgICAgICdQUl9BVFRSSUJfTkFNRSc6IFBSX0FUVFJJQl9OQU1FLFxuICAgICAgICAnUFJfQVRUUklCX1ZBTFVFJzogUFJfQVRUUklCX1ZBTFVFLFxuICAgICAgICAnUFJfQ09NTUVOVCc6IFBSX0NPTU1FTlQsXG4gICAgICAgICdQUl9ERUNMQVJBVElPTic6IFBSX0RFQ0xBUkFUSU9OLFxuICAgICAgICAnUFJfS0VZV09SRCc6IFBSX0tFWVdPUkQsXG4gICAgICAgICdQUl9MSVRFUkFMJzogUFJfTElURVJBTCxcbiAgICAgICAgJ1BSX05PQ09ERSc6IFBSX05PQ09ERSxcbiAgICAgICAgJ1BSX1BMQUlOJzogUFJfUExBSU4sXG4gICAgICAgICdQUl9QVU5DVFVBVElPTic6IFBSX1BVTkNUVUFUSU9OLFxuICAgICAgICAnUFJfU09VUkNFJzogUFJfU09VUkNFLFxuICAgICAgICAnUFJfU1RSSU5HJzogUFJfU1RSSU5HLFxuICAgICAgICAnUFJfVEFHJzogUFJfVEFHLFxuICAgICAgICAnUFJfVFlQRSc6IFBSX1RZUEUsXG4gICAgICAgICdwcmV0dHlQcmludE9uZSc6XG4gICAgICAgICAgIElOX0dMT0JBTF9TQ09QRVxuICAgICAgICAgICAgID8gKHdpblsncHJldHR5UHJpbnRPbmUnXSA9ICRwcmV0dHlQcmludE9uZSlcbiAgICAgICAgICAgICA6IChwcmV0dHlQcmludE9uZSA9ICRwcmV0dHlQcmludE9uZSksXG4gICAgICAgICdwcmV0dHlQcmludCc6IHByZXR0eVByaW50ID1cbiAgICAgICAgICAgSU5fR0xPQkFMX1NDT1BFXG4gICAgICAgICAgICAgPyAod2luWydwcmV0dHlQcmludCddID0gJHByZXR0eVByaW50KVxuICAgICAgICAgICAgIDogKHByZXR0eVByaW50ID0gJHByZXR0eVByaW50KVxuICAgICAgfTtcblxuICAvLyBNYWtlIFBSIGF2YWlsYWJsZSB2aWEgdGhlIEFzeW5jaHJvbm91cyBNb2R1bGUgRGVmaW5pdGlvbiAoQU1EKSBBUEkuXG4gIC8vIFBlciBodHRwczovL2dpdGh1Yi5jb20vYW1kanMvYW1kanMtYXBpL3dpa2kvQU1EOlxuICAvLyBUaGUgQXN5bmNocm9ub3VzIE1vZHVsZSBEZWZpbml0aW9uIChBTUQpIEFQSSBzcGVjaWZpZXMgYVxuICAvLyBtZWNoYW5pc20gZm9yIGRlZmluaW5nIG1vZHVsZXMgc3VjaCB0aGF0IHRoZSBtb2R1bGUgYW5kIGl0c1xuICAvLyBkZXBlbmRlbmNpZXMgY2FuIGJlIGFzeW5jaHJvbm91c2x5IGxvYWRlZC5cbiAgLy8gLi4uXG4gIC8vIFRvIGFsbG93IGEgY2xlYXIgaW5kaWNhdG9yIHRoYXQgYSBnbG9iYWwgZGVmaW5lIGZ1bmN0aW9uIChhc1xuICAvLyBuZWVkZWQgZm9yIHNjcmlwdCBzcmMgYnJvd3NlciBsb2FkaW5nKSBjb25mb3JtcyB0byB0aGUgQU1EIEFQSSxcbiAgLy8gYW55IGdsb2JhbCBkZWZpbmUgZnVuY3Rpb24gU0hPVUxEIGhhdmUgYSBwcm9wZXJ0eSBjYWxsZWQgXCJhbWRcIlxuICAvLyB3aG9zZSB2YWx1ZSBpcyBhbiBvYmplY3QuIFRoaXMgaGVscHMgYXZvaWQgY29uZmxpY3Qgd2l0aCBhbnlcbiAgLy8gb3RoZXIgZXhpc3RpbmcgSmF2YVNjcmlwdCBjb2RlIHRoYXQgY291bGQgaGF2ZSBkZWZpbmVkIGEgZGVmaW5lKClcbiAgLy8gZnVuY3Rpb24gdGhhdCBkb2VzIG5vdCBjb25mb3JtIHRvIHRoZSBBTUQgQVBJLlxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZVsnYW1kJ10pIHtcbiAgICBkZWZpbmUoXCJnb29nbGUtY29kZS1wcmV0dGlmeVwiLCBbXSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFBSOyBcbiAgICB9KTtcbiAgfVxufSkoKTtcbiIsIiggZnVuY3Rpb24oKSB7XG5cdHZhciBpc193ZWJraXQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZiggJ3dlYmtpdCcgKSA+IC0xLFxuXHQgICAgaXNfb3BlcmEgID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoICdvcGVyYScgKSAgPiAtMSxcblx0ICAgIGlzX2llICAgICA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCAnbXNpZScgKSAgID4gLTE7XG5cblx0aWYgKCAoIGlzX3dlYmtpdCB8fCBpc19vcGVyYSB8fCBpc19pZSApICYmICd1bmRlZmluZWQnICE9PSB0eXBlb2YoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkICkgKSB7XG5cdFx0dmFyIGV2ZW50TWV0aG9kID0gKCB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ2F0dGFjaEV2ZW50Jztcblx0XHR3aW5kb3dbIGV2ZW50TWV0aG9kIF0oICdoYXNoY2hhbmdlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBsb2NhdGlvbi5oYXNoLnN1YnN0cmluZyggMSApICk7XG5cblx0XHRcdGlmICggZWxlbWVudCApIHtcblx0XHRcdFx0aWYgKCAhIC9eKD86YXxzZWxlY3R8aW5wdXR8YnV0dG9ufHRleHRhcmVhKSQvaS50ZXN0KCBlbGVtZW50LnRhZ05hbWUgKSApXG5cdFx0XHRcdFx0ZWxlbWVudC50YWJJbmRleCA9IC0xO1xuXG5cdFx0XHRcdGVsZW1lbnQuZm9jdXMoKTtcblx0XHRcdH1cblx0XHR9LCBmYWxzZSApO1xuXHR9XG59KSgpO1xuIiwiLypnbG9iYWwgbWFrb3Rva3csIGpRdWVyeSovXG4oZnVuY3Rpb24oJCl7XG5cdHZhciBpc0FkbWluID0gZmFsc2UsXG5cdFx0dWEgPSBuYXZpZ2F0b3IudXNlckFnZW50LFxuXHRcdGlzSUUgPSB1YS5tYXRjaCgvbXNpZS9pKSxcblx0XHRpc0lFNyA9IGlzSUUgJiYgdWEubWF0Y2goL21zaWUgN1xcLi9pKSxcblx0XHRpc0lFOCA9IGlzSUUgJiYgdWEubWF0Y2goL21zaWUgOFxcLi9pKTtcblx0aWYgKGlzSUUpIHtcblx0XHRpZiAoaXNJRTcpIHtcblx0XHRcdCQoXCJodG1sXCIpLmFkZENsYXNzKFwiaWUgaWU3XCIpO1xuXHRcdH0gZWxzZSBpZiAoaXNJRTgpIHtcblx0XHRcdCQoXCJodG1sXCIpLmFkZENsYXNzKFwiaWUgaWU4XCIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQkKFwiaHRtbFwiKS5hZGRDbGFzcyhcImllXCIpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHVwZGF0ZVNoYXJlQ291bnQoKSB7XG5cdFx0dmFyICRzaGFyZVRoaXMgPSAkKCcjc2hhcmVUaGlzJyk7XG5cdFx0dmFyIHBlcm1hbGluayA9ICRzaGFyZVRoaXMuZGF0YSgndXJsJyksIGVuY29kZWRQZXJtYWxpbmsgPSBlbmNvZGVVUklDb21wb25lbnQocGVybWFsaW5rKTtcblx0XHRmdW5jdGlvbiB0b0ludChudW0pIHtcblx0XHRcdHZhciBpID0gcGFyc2VJbnQobnVtKTtcblx0XHRcdHJldHVybiAoaXNOYU4oaSkpID8gMCA6IGk7XG5cdFx0fVxuXHRcdGlmIChpc0FkbWluKSB7XG5cdFx0XHQkLmFqYXgoe3VybDogJ2h0dHA6Ly91cmxzLmFwaS50d2l0dGVyLmNvbS8xL3VybHMvY291bnQuanNvbj91cmw9JyArIGVuY29kZWRQZXJtYWxpbmssIGRhdGFUeXBlOiAnanNvbnAnfSlcblx0XHRcdFx0LmRvbmUoZnVuY3Rpb24gKGRhdGEpIHtcblx0XHRcdFx0XHRpZiAoZGF0YSkge1xuXHRcdFx0XHRcdFx0dmFyICRjb3VudCA9ICQoJzxhLz4nKS5hZGRDbGFzcygnc2hhcmUtY291bnQgc2hhcmUtY291bnQtbGluaycpLnRleHQodG9JbnQoZGF0YS5jb3VudCkpO1xuXHRcdFx0XHRcdFx0JGNvdW50LmF0dHIoe1xuXHRcdFx0XHRcdFx0XHQnaHJlZic6ICdodHRwOi8vdHdpdHRlci5jb20vc2VhcmNoP3E9JyArIGVuY29kZWRQZXJtYWxpbmssXG5cdFx0XHRcdFx0XHRcdCd0YXJnZXQnOiAnX2JsYW5rJ1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHQkc2hhcmVUaGlzLmZpbmQoJy5zaGFyZS10d2l0dGVyIC5zaGFyZS10aXRsZScpLmFwcGVuZCgkY291bnQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHQkLmFqYXgoe3VybDogJ2h0dHA6Ly9hcGkuYi5zdC1oYXRlbmEuY29tL2VudHJ5LmNvdW50P3VybD0nICsgZW5jb2RlZFBlcm1hbGluaywgZGF0YVR5cGU6ICdqc29ucCd9KVxuXHRcdFx0XHQuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0XHRcdHZhciAkY291bnQgPSAkKCc8c3Bhbi8+JykuYWRkQ2xhc3MoJ3NoYXJlLWNvdW50JykudGV4dCh0b0ludChkYXRhKSk7XG5cdFx0XHRcdFx0JHNoYXJlVGhpcy5maW5kKCcuc2hhcmUtaGF0ZW5hIC5zaGFyZS10aXRsZScpLmFwcGVuZCgkY291bnQpO1xuXHRcdFx0XHR9KTtcblx0XHRcdCQuYWpheCh7dXJsOiAnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vP2lkPScgKyBlbmNvZGVkUGVybWFsaW5rLCBkYXRhVHlwZTogJ2pzb25wJ30pXG5cdFx0XHRcdC5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRcdFx0aWYgKGRhdGEpIHtcblx0XHRcdFx0XHRcdHZhciAkY291bnQgPSAkKCc8c3Bhbi8+JykuYWRkQ2xhc3MoJ3NoYXJlLWNvdW50JykudGV4dCh0b0ludChkYXRhLnNoYXJlcykpO1xuXHRcdFx0XHRcdFx0JHNoYXJlVGhpcy5maW5kKCcuc2hhcmUtZmFjZWJvb2sgLnNoYXJlLXRpdGxlJykuYXBwZW5kKCRjb3VudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0aWYgKG1ha290b2t3ICYmIG1ha290b2t3LmNvdW50ZXJfYXBpICYmIG1ha290b2t3LmNvdW50ZXJfYXBpLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0JC5hamF4KHt1cmw6IG1ha290b2t3LmNvdW50ZXJfYXBpICsgJz91cmw9JyArIGVuY29kZWRQZXJtYWxpbmssIGRhdGFUeXBlOiAnanNvbnAnfSlcblx0XHRcdFx0XHQuZG9uZShmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0XHRcdFx0aWYgKCFkYXRhKSByZXR1cm47XG5cdFx0XHRcdFx0XHR2YXIgJGNvdW50UG9ja2V0ID0gJCgnPHNwYW4vPicpLmFkZENsYXNzKCdzaGFyZS1jb3VudCcpLnRleHQodG9JbnQoZGF0YS5wb2NrZXQpKTtcblx0XHRcdFx0XHRcdCRzaGFyZVRoaXMuZmluZCgnLnNoYXJlLXBvY2tldCAuc2hhcmUtdGl0bGUnKS5hcHBlbmQoJGNvdW50UG9ja2V0KTtcblx0XHRcdFx0XHRcdHZhciAkY291bnRHb29nbGVQbHVzID0gJCgnPHNwYW4vPicpLmFkZENsYXNzKCdzaGFyZS1jb3VudCcpLnRleHQodG9JbnQoZGF0YS5nb29nbGUpKTtcblx0XHRcdFx0XHRcdCRzaGFyZVRoaXMuZmluZCgnLnNoYXJlLWdvb2dsZXBsdXMgLnNoYXJlLXRpdGxlJykuYXBwZW5kKCRjb3VudEdvb2dsZVBsdXMpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gbGF6eUxvYWRTaGFyZUNvdW50KCkge1xuXHRcdHZhciAkc2hhcmVUaGlzID0gJCgnI3NoYXJlVGhpcycpO1xuXHRcdGlmICggJHNoYXJlVGhpcy5sZW5ndGggPiAwICYmIGlzQWRtaW4pIHtcblx0XHRcdCQod2luZG93KS5iaW5kKCdzY3JvbGwuc2hhcmVUaGlzIGxvYWQuc2hhcmVUaGlzJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggJCh0aGlzKS5zY3JvbGxUb3AoKSArICQodGhpcykuaGVpZ2h0KCkgPiAkc2hhcmVUaGlzLm9mZnNldCgpLnRvcCApIHtcblx0XHRcdFx0XHR1cGRhdGVTaGFyZUNvdW50KCk7XG5cdFx0XHRcdFx0JCh0aGlzKS51bmJpbmQoJ3Njcm9sbC5zaGFyZVRoaXMgbG9hZC5zaGFyZVRoaXMnKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyICRtYWluID0gJCgnI21haW4nKSxcblx0XHQkZm9vdGVyTWFyZ2luID0gJCgnI2Zvb3Rlck1hcmdpbicpO1xuXG5cdGZ1bmN0aW9uIHN0aWNreUZvb3RlcigpIHtcblx0XHR2YXIgd2luZG93SGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuXHRcdHZhciBkb2NIZWlnaHQgPSAkKGRvY3VtZW50LmJvZHkpLmhlaWdodCgpIC0gJGZvb3Rlck1hcmdpbi5oZWlnaHQoKTtcblx0XHR2YXIgZGlmZiA9IHdpbmRvd0hlaWdodCAtIGRvY0hlaWdodDtcblx0XHRpZiAoIGlzQWRtaW4gKSB7XG5cdFx0XHRkaWZmIC09IDMyO1xuXHRcdH1cblx0XHRpZiAoZGlmZiA8PSAwKSB7XG5cdFx0XHRkaWZmID0gMTtcblx0XHR9XG5cdFx0JGZvb3Rlck1hcmdpbi5oZWlnaHQoZGlmZik7XG5cdH1cblxuXHQkKHdpbmRvdylcblx0XHQub24oJ3N0aWNreScsIHN0aWNreUZvb3Rlcilcblx0XHQuc2Nyb2xsKHN0aWNreUZvb3Rlcilcblx0XHQucmVzaXplKHN0aWNreUZvb3Rlcik7XG5cblx0JChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcblx0XHRpZiAoJC5pc0Z1bmN0aW9uKHByZXR0eVByaW50KSkge1xuXHRcdFx0cHJldHR5UHJpbnQoKTtcblx0XHR9XG5cdFx0aXNBZG1pbiA9ICggJCgnI3dwYWRtaW5iYXInKS5sZW5ndGggPiAwICk7XG5cdFx0bGF6eUxvYWRTaGFyZUNvdW50KCk7XG5cdFx0c3RpY2t5Rm9vdGVyKCk7XG5cdH0pO1xuXG59KShqUXVlcnkpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9